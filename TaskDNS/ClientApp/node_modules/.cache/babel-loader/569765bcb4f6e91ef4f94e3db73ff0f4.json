{"ast":null,"code":"import { useContext } from 'react';\nimport { TokenContext } from '../../Authorization/AuthorizationProvider';\nconst tokenContext = useContext(TokenContext);\nclass Repository {\n  constructor() {\n    this.postCommandAsync = async command => {\n      const urlAddOnServer = 'https://localhost:7145/command/add';\n      const dataClient = {\n        id: 0,\n        data: '',\n        textCommand: command\n      };\n      if (command !== '') {\n        await fetch(urlAddOnServer, {\n          method: 'POST',\n          redirect: 'follow',\n          body: JSON.stringify(dataClient),\n          headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n            'Authenticate': \"Bearer \" + tokenContext.token\n          }\n        });\n      }\n    };\n    this.currnetDirectoryAsync = async () => {\n      const urlGetDirectory = 'https://localhost:7145/command/getDirectory';\n      const responce = await fetch(urlGetDirectory, {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n          'Authenticate': \"Bearer \" + tokenContext.token\n        }\n      });\n      return await responce.text();\n    };\n    this.subDirectoriesAsync = async () => {\n      const urlGetDirectories = 'https://localhost:7145/command/getDirectories';\n      const responce = await fetch(urlGetDirectories, {\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n          'Authenticate': \"Bearer \" + tokenContext.token\n        }\n      });\n      const responceJson = await responce.json();\n      const result = await responceJson;\n      return result;\n    };\n    this.getHistoryAsync = async () => {\n      const urlGetHistory = 'https://localhost:7145/command/getHistory';\n      const response = await fetch(urlGetHistory, {\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n          'Authenticate': \"Bearer \" + tokenContext.token\n        }\n      });\n      const responceJson = await response.json();\n      const result = await responceJson;\n      return result;\n    };\n    this.stopCommandAsync = async () => {\n      const urlStopCommand = 'https://localhost:7145/command/Stop';\n      await fetch(urlStopCommand, {\n        method: 'POST',\n        redirect: 'follow',\n        body: JSON.stringify(null),\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n          'Authenticate': \"Bearer \" + tokenContext.token\n        }\n      });\n    };\n  }\n}\nexport const dataServer = new Repository();","map":{"version":3,"names":["useContext","TokenContext","tokenContext","Repository","postCommandAsync","command","urlAddOnServer","dataClient","id","data","textCommand","fetch","method","redirect","body","JSON","stringify","headers","token","currnetDirectoryAsync","urlGetDirectory","responce","text","subDirectoriesAsync","urlGetDirectories","responceJson","json","result","getHistoryAsync","urlGetHistory","response","stopCommandAsync","urlStopCommand","dataServer"],"sources":["C:/Project/ASP.Net/WebShell_2/TaskDNS/ClientApp/src/Server/Command/Repository.tsx"],"sourcesContent":["import { useContext } from 'react'\r\nimport { TokenContext } from '../../Authorization/AuthorizationProvider'\r\nimport { IHistory } from '../../Input/Interface/IHistory'\r\n\r\nconst tokenContext = useContext(TokenContext)\r\nclass Repository {\r\n    \r\n    postCommandAsync = async (command : string) : Promise<void>=>{\r\n        const urlAddOnServer = 'https://localhost:7145/command/add'\r\n        const dataClient = { id: 0, data: '', textCommand: command }\r\n        \r\n        if (command !== '') {\r\n            await fetch(urlAddOnServer, {\r\n                method: 'POST',\r\n                redirect: 'follow',\r\n                body: JSON.stringify(dataClient),\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json',\r\n                    'Authenticate': \"Bearer \" + tokenContext.token\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    currnetDirectoryAsync = async () : Promise<string> =>{\r\n        const urlGetDirectory = 'https://localhost:7145/command/getDirectory'\r\n        const responce = await fetch(urlGetDirectory, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n                'Authenticate': \"Bearer \" + tokenContext.token\r\n            }\r\n        });\r\n        \r\n        return await responce.text()\r\n    }\r\n    \r\n    subDirectoriesAsync = async () : Promise<string[]> => {\r\n        const urlGetDirectories = 'https://localhost:7145/command/getDirectories'\r\n        const responce = await fetch(urlGetDirectories,{headers:{\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            'Authenticate': \"Bearer \" + tokenContext.token\r\n        }})\r\n        const responceJson = await responce.json()\r\n        const result = await responceJson as string[]\r\n\r\n        return result\r\n    }\r\n\r\n    getHistoryAsync = async () : Promise<IHistory[]> => {\r\n        const urlGetHistory = 'https://localhost:7145/command/getHistory'\r\n        const response = await fetch(urlGetHistory,{headers:{\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            'Authenticate': \"Bearer \" + tokenContext.token\r\n        }})\r\n        const responceJson = await response.json()\r\n        const result = await responceJson as IHistory[]\r\n\r\n        return result\r\n    }\r\n\r\n    stopCommandAsync = async () : Promise<void> => {\r\n\r\n        const urlStopCommand = 'https://localhost:7145/command/Stop'\r\n    \r\n        await fetch(urlStopCommand, {\r\n            method: 'POST',\r\n            redirect: 'follow',\r\n            body: JSON.stringify(null),\r\n            headers: {  \r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json', \r\n                'Authenticate': \"Bearer \" + tokenContext.token\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport const dataServer = new Repository()"],"mappings":"AAAA,SAASA,UAAU,QAAQ,OAAO;AAClC,SAASC,YAAY,QAAQ,2CAA2C;AAGxE,MAAMC,YAAY,GAAGF,UAAU,CAACC,YAAY,CAAC;AAC7C,MAAME,UAAU,CAAC;EAAA;IAAA,KAEbC,gBAAgB,GAAG,MAAOC,OAAgB,IAAmB;MACzD,MAAMC,cAAc,GAAG,oCAAoC;MAC3D,MAAMC,UAAU,GAAG;QAAEC,EAAE,EAAE,CAAC;QAAEC,IAAI,EAAE,EAAE;QAAEC,WAAW,EAAEL;MAAQ,CAAC;MAE5D,IAAIA,OAAO,KAAK,EAAE,EAAE;QAChB,MAAMM,KAAK,CAACL,cAAc,EAAE;UACxBM,MAAM,EAAE,MAAM;UACdC,QAAQ,EAAE,QAAQ;UAClBC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACT,UAAU,CAAC;UAChCU,OAAO,EAAE;YACL,QAAQ,EAAE,kBAAkB;YAC5B,cAAc,EAAE,kBAAkB;YAClC,cAAc,EAAE,SAAS,GAAGf,YAAY,CAACgB;UAC7C;QACJ,CAAC,CAAC;MACN;IACJ,CAAC;IAAA,KAEDC,qBAAqB,GAAG,YAA6B;MACjD,MAAMC,eAAe,GAAG,6CAA6C;MACrE,MAAMC,QAAQ,GAAG,MAAMV,KAAK,CAACS,eAAe,EAAE;QAC1CR,MAAM,EAAE,KAAK;QACbK,OAAO,EAAE;UACL,QAAQ,EAAE,kBAAkB;UAC5B,cAAc,EAAE,kBAAkB;UAClC,cAAc,EAAE,SAAS,GAAGf,YAAY,CAACgB;QAC7C;MACJ,CAAC,CAAC;MAEF,OAAO,MAAMG,QAAQ,CAACC,IAAI,EAAE;IAChC,CAAC;IAAA,KAEDC,mBAAmB,GAAG,YAAgC;MAClD,MAAMC,iBAAiB,GAAG,+CAA+C;MACzE,MAAMH,QAAQ,GAAG,MAAMV,KAAK,CAACa,iBAAiB,EAAC;QAACP,OAAO,EAAC;UACpD,QAAQ,EAAE,kBAAkB;UAC5B,cAAc,EAAE,kBAAkB;UAClC,cAAc,EAAE,SAAS,GAAGf,YAAY,CAACgB;QAC7C;MAAC,CAAC,CAAC;MACH,MAAMO,YAAY,GAAG,MAAMJ,QAAQ,CAACK,IAAI,EAAE;MAC1C,MAAMC,MAAM,GAAG,MAAMF,YAAwB;MAE7C,OAAOE,MAAM;IACjB,CAAC;IAAA,KAEDC,eAAe,GAAG,YAAkC;MAChD,MAAMC,aAAa,GAAG,2CAA2C;MACjE,MAAMC,QAAQ,GAAG,MAAMnB,KAAK,CAACkB,aAAa,EAAC;QAACZ,OAAO,EAAC;UAChD,QAAQ,EAAE,kBAAkB;UAC5B,cAAc,EAAE,kBAAkB;UAClC,cAAc,EAAE,SAAS,GAAGf,YAAY,CAACgB;QAC7C;MAAC,CAAC,CAAC;MACH,MAAMO,YAAY,GAAG,MAAMK,QAAQ,CAACJ,IAAI,EAAE;MAC1C,MAAMC,MAAM,GAAG,MAAMF,YAA0B;MAE/C,OAAOE,MAAM;IACjB,CAAC;IAAA,KAEDI,gBAAgB,GAAG,YAA4B;MAE3C,MAAMC,cAAc,GAAG,qCAAqC;MAE5D,MAAMrB,KAAK,CAACqB,cAAc,EAAE;QACxBpB,MAAM,EAAE,MAAM;QACdC,QAAQ,EAAE,QAAQ;QAClBC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC,IAAI,CAAC;QAC1BC,OAAO,EAAE;UACL,QAAQ,EAAE,kBAAkB;UAC5B,cAAc,EAAE,kBAAkB;UAClC,cAAc,EAAE,SAAS,GAAGf,YAAY,CAACgB;QAC7C;MACJ,CAAC,CAAC;IACN,CAAC;EAAA;AACL;AAEA,OAAO,MAAMe,UAAU,GAAG,IAAI9B,UAAU,EAAE"},"metadata":{},"sourceType":"module"}