{"ast":null,"code":"var _jsxFileName = \"C:\\\\Project\\\\ASP.Net\\\\WebShell_2\\\\TaskDNS\\\\ClientApp\\\\src\\\\Input\\\\Input.tsx\",\n  _s = $RefreshSig$();\nimport { allocateSubDirectory, replaceToOneSeparation } from './textProcessing';\nimport { useState } from 'react';\nimport { StatusKey } from './Enum/StatusKey';\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet indexCurrentDirectory = 0;\nlet indexCurrentHistory = 0;\nexport const Input = _ref => {\n  _s();\n  let {\n    isDisabledWrite,\n    sendCommand,\n    stopCommand,\n    serverDirectory,\n    subDirectory,\n    history\n  } = _ref;\n  const [valueUser, setValueUser] = useState('');\n  const [valueInput, setValueInput] = useState('');\n  const [currentSubDirectory, setCurrentSubDirectory] = useState('');\n  const [currentDirectory, setCurrentDirectory] = useState(serverDirectory);\n  const eventHandler = e => {\n    checkStopWrite(e);\n    switch (e.key) {\n      case StatusKey.SendCommand:\n        sendCommand(valueInput);\n        setValueInput('');\n        setValueUser('');\n        break;\n      case StatusKey.SwitchSubDirectory:\n        e.preventDefault();\n        switchSubDirectory();\n        break;\n      case StatusKey.Up:\n        e.preventDefault();\n        callUpCommand();\n        break;\n      case StatusKey.Down:\n        e.preventDefault();\n        callDownCommand();\n        break;\n      case StatusKey.Cancel:\n        stopCommand();\n        break;\n    }\n    return e.key;\n  };\n  const switchSubDirectory = () => {\n    indexCurrentDirectory++;\n    if (indexCurrentDirectory > subDirectory.length - 1) indexCurrentDirectory = 0;\n    setCurrentSubDirectory(allocateSubDirectory(subDirectory[indexCurrentDirectory], serverDirectory));\n    setValueInput(valueUser + currentSubDirectory);\n  };\n  const callDownCommand = () => {\n    indexCurrentHistory++;\n    if (indexCurrentHistory > history.length - 1) indexCurrentHistory = 0;\n    setValueInput(history[indexCurrentHistory].textCommand);\n  };\n  const callUpCommand = () => {\n    indexCurrentHistory--;\n    if (indexCurrentHistory < 0) indexCurrentHistory = history.length - 1;\n    setValueInput(history[indexCurrentHistory].textCommand);\n  };\n  const checkStopWrite = e => {\n    if (e.key === StatusKey.Cancel) return e.key;\n    return isDisabledWrite ? e.key = '' : e.key;\n  };\n  const changeHandler = e => {\n    if (isDisabledWrite) return;\n    setValueUser(e.currentTarget.value);\n    setValueInput(e.currentTarget.value);\n  };\n  const scrollAuto = e => {\n    e === null || e === void 0 ? void 0 : e.scrollIntoView(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"inputElement\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: replaceToOneSeparation(currentDirectory)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      ref: scrollAuto,\n      value: valueInput,\n      onKeyDown: eventHandler,\n      onChange: changeHandler,\n      className: \"inputConsole\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 12\n  }, this);\n};\n_s(Input, \"jkzbrg+FoU5GGq4R1ub3tcpEUFA=\");\n_c = Input;\nvar _c;\n$RefreshReg$(_c, \"Input\");","map":{"version":3,"names":["allocateSubDirectory","replaceToOneSeparation","useState","StatusKey","React","indexCurrentDirectory","indexCurrentHistory","Input","isDisabledWrite","sendCommand","stopCommand","serverDirectory","subDirectory","history","valueUser","setValueUser","valueInput","setValueInput","currentSubDirectory","setCurrentSubDirectory","currentDirectory","setCurrentDirectory","eventHandler","e","checkStopWrite","key","SendCommand","SwitchSubDirectory","preventDefault","switchSubDirectory","Up","callUpCommand","Down","callDownCommand","Cancel","length","textCommand","changeHandler","currentTarget","value","scrollAuto","scrollIntoView"],"sources":["C:/Project/ASP.Net/WebShell_2/TaskDNS/ClientApp/src/Input/Input.tsx"],"sourcesContent":["import { allocateSubDirectory,replaceToOneSeparation } from './textProcessing'\r\nimport { KeyboardEvent, FC, Key, FormEvent, useState, useEffect, useRef } from 'react'\r\nimport { StatusKey } from './Enum/StatusKey'\r\nimport { IInput } from './Interface/IInput'\r\nimport React from 'react'\r\n\r\nlet indexCurrentDirectory = 0\r\nlet indexCurrentHistory = 0\r\n\r\nexport const Input : FC<IInput> =  ({ isDisabledWrite, sendCommand, stopCommand, serverDirectory ,subDirectory,history})  => {\r\n    const [valueUser,setValueUser] = useState('')\r\n    const [valueInput,setValueInput] = useState('')\r\n    const [currentSubDirectory,setCurrentSubDirectory] = useState('')\r\n    const [currentDirectory,setCurrentDirectory] = useState(serverDirectory)\r\n    \r\n    const eventHandler = (e: KeyboardEvent): Key => {\r\n        checkStopWrite(e)\r\n\r\n        switch (e.key) {\r\n            case StatusKey.SendCommand:\r\n                sendCommand(valueInput)\r\n                setValueInput('')\r\n                setValueUser('')\r\n                break\r\n\r\n            case StatusKey.SwitchSubDirectory:\r\n                e.preventDefault()\r\n                switchSubDirectory()\r\n                break\r\n\r\n            case StatusKey.Up:\r\n                e.preventDefault()\r\n                callUpCommand()\r\n                break\r\n\r\n            case StatusKey.Down:\r\n                e.preventDefault()\r\n                callDownCommand()\r\n                break\r\n\r\n            case StatusKey.Cancel:\r\n                stopCommand()\r\n                break\r\n        }\r\n        return e.key\r\n    }\r\n\r\n    const switchSubDirectory = (): void => {\r\n        indexCurrentDirectory++\r\n        if (indexCurrentDirectory > subDirectory.length - 1) \r\n            indexCurrentDirectory = 0\r\n        \r\n        setCurrentSubDirectory(allocateSubDirectory(subDirectory[indexCurrentDirectory],serverDirectory))\r\n        setValueInput(valueUser + currentSubDirectory)\r\n    }\r\n\r\n    const callDownCommand = () : void => {\r\n        indexCurrentHistory++\r\n        if (indexCurrentHistory > history.length - 1) \r\n            indexCurrentHistory = 0\r\n        \r\n        setValueInput(history[indexCurrentHistory].textCommand)\r\n    }\r\n\r\n    const callUpCommand = () : void => {\r\n        indexCurrentHistory--;\r\n        if (indexCurrentHistory < 0) \r\n            indexCurrentHistory =  history.length - 1;\r\n        \r\n        setValueInput(history[indexCurrentHistory].textCommand)\r\n    }\r\n    \r\n    const checkStopWrite = (e: KeyboardEvent): string => {\r\n        if(e.key === StatusKey.Cancel)\r\n        return e.key\r\n        \r\n        return isDisabledWrite ? e.key = '' : e.key\r\n    }\r\n\r\n    const changeHandler = (e : FormEvent<HTMLInputElement>) : void => {\r\n        if(isDisabledWrite)\r\n            return;\r\n\r\n        setValueUser(e.currentTarget.value)\r\n        setValueInput(e.currentTarget.value)\r\n    }\r\n    \r\n    const scrollAuto = (e : HTMLInputElement) : void => {\r\n        e?.scrollIntoView(false)\r\n    }\r\n\r\n    return <div className='inputElement'>\r\n                <div>{replaceToOneSeparation(currentDirectory)}</div>\r\n                <input ref ={scrollAuto} value = {valueInput} onKeyDown = {eventHandler} onChange = {changeHandler} className='inputConsole'/>\r\n            </div> \r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}