[{"C:\\Project\\ASP.Net\\TestGit\\webshell_front\\src\\index.tsx":"1","C:\\Project\\ASP.Net\\TestGit\\webshell_front\\src\\App.tsx":"2","C:\\Project\\ASP.Net\\TestGit\\webshell_front\\src\\Authorization\\AuthorizationProvider.tsx":"3","C:\\Project\\ASP.Net\\TestGit\\webshell_front\\src\\Authorization\\Component\\Register.tsx":"4","C:\\Project\\ASP.Net\\TestGit\\webshell_front\\src\\Authorization\\Component\\Login.tsx":"5","C:\\Project\\ASP.Net\\TestGit\\webshell_front\\src\\Console\\Console.tsx":"6","C:\\Project\\ASP.Net\\TestGit\\webshell_front\\src\\Context\\ConsoleContext.tsx":"7","C:\\Project\\ASP.Net\\TestGit\\webshell_front\\src\\Console\\Output\\Output.tsx":"8","C:\\Project\\ASP.Net\\TestGit\\webshell_front\\src\\Console\\Input\\Input.tsx":"9","C:\\Project\\ASP.Net\\TestGit\\webshell_front\\src\\Console\\Output\\Function\\ConsoleDataReducer.tsx":"10","C:\\Project\\ASP.Net\\TestGit\\webshell_front\\src\\Console\\Output\\Function\\ConsoleOutputDataReducer.tsx":"11","C:\\Project\\ASP.Net\\TestGit\\webshell_front\\src\\Console\\Input\\Function\\textProcessing.tsx":"12","C:\\Project\\ASP.Net\\TestGit\\webshell_front\\src\\Console\\Input\\Function\\inputReducer.tsx":"13","C:\\Project\\ASP.Net\\TestGit\\webshell_front\\src\\Server\\Command\\Repository.tsx":"14","C:\\Project\\ASP.Net\\TestGit\\webshell_front\\src\\Server\\WebSoket\\Hub.tsx":"15","C:\\Project\\ASP.Net\\TestGit\\webshell_front\\src\\Console\\Input\\Enum\\ActionKind.tsx":"16","C:\\Project\\ASP.Net\\TestGit\\webshell_front\\src\\Console\\Input\\Enum\\StatusKey.tsx":"17"},{"size":345,"mtime":1669076315602,"results":"18","hashOfConfig":"19"},{"size":694,"mtime":1669617805396,"results":"20","hashOfConfig":"19"},{"size":574,"mtime":1669621858387,"results":"21","hashOfConfig":"19"},{"size":1552,"mtime":1669777056885,"results":"22","hashOfConfig":"19"},{"size":2075,"mtime":1669777604878,"results":"23","hashOfConfig":"19"},{"size":446,"mtime":1669613099310,"results":"24","hashOfConfig":"19"},{"size":3450,"mtime":1669613116744,"results":"25","hashOfConfig":"19"},{"size":472,"mtime":1669612806399,"results":"26","hashOfConfig":"19"},{"size":3554,"mtime":1669617317358,"results":"27","hashOfConfig":"19"},{"size":470,"mtime":1669182458009,"results":"28","hashOfConfig":"19"},{"size":623,"mtime":1669613063134,"results":"29","hashOfConfig":"19"},{"size":476,"mtime":1669096723181,"results":"30","hashOfConfig":"19"},{"size":657,"mtime":1669616924104,"results":"31","hashOfConfig":"19"},{"size":2975,"mtime":1669616542450,"results":"32","hashOfConfig":"19"},{"size":678,"mtime":1669684195753,"results":"33","hashOfConfig":"19"},{"size":129,"mtime":1669080854217,"results":"34","hashOfConfig":"19"},{"size":190,"mtime":1669182512549,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"39"},"vyxsjy",{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59"},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","suppressedMessages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81"},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"91"},"C:\\Project\\ASP.Net\\TestGit\\webshell_front\\src\\index.tsx",["92"],[],"﻿// @ts-nocheck\r\nimport { BrowserRouter } from 'react-router-dom'\r\nimport ReactDOM from 'react-dom/client'\r\nimport { App } from './App'\r\nimport './css/page.css'\r\n\r\nconst rootElement = document.getElementById('root');\r\nconst root = ReactDOM.createRoot(rootElement);\r\n\r\nroot.render(\r\n    <BrowserRouter>\r\n        <App />\r\n    </BrowserRouter>\r\n)","C:\\Project\\ASP.Net\\TestGit\\webshell_front\\src\\App.tsx",[],[],"C:\\Project\\ASP.Net\\TestGit\\webshell_front\\src\\Authorization\\AuthorizationProvider.tsx",[],[],"C:\\Project\\ASP.Net\\TestGit\\webshell_front\\src\\Authorization\\Component\\Register.tsx",[],[],"C:\\Project\\ASP.Net\\TestGit\\webshell_front\\src\\Authorization\\Component\\Login.tsx",["93"],[],"import { TokenContext } from '../AuthorizationProvider'\r\nimport React, { useContext, useRef } from 'react'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport '../../css/auth.css'\r\nimport 'ts-replace-all'\r\n\r\ntype User = {\r\n    Id:number,\r\n    Login:string | undefined,\r\n    Password:string | undefined\r\n}\r\n\r\nexport const Login = () => {\r\n    const navigate = useNavigate()\r\n    const passwordValue = useRef<HTMLInputElement>(null)\r\n    const loginValue = useRef<HTMLInputElement>(null)\r\n    const tokenContext = useContext(TokenContext)\r\n\r\n    const authorization = async (data : User) : Promise<void> => {\r\n        const token = await getTokenAsync(data)\r\n        const readyToken = token.replaceAll('\\\"','')\r\n\r\n        if(readyToken === \"\")\r\n            return\r\n\r\n        tokenContext.setToken(token)\r\n        navigate('/console')\r\n    }\r\n\r\n    const getTokenAsync = async (data : User) : Promise<string> => {\r\n        const urlLogin = 'https://localhost:7145/jwt/login'\r\n        const responce = await fetch (urlLogin,{ \r\n            method: 'POST',\r\n            body:  JSON.stringify(data),\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n            }\r\n        })\r\n\r\n        const promise = await responce.text()\r\n        \r\n        return promise\r\n    }\r\n\r\n    return (\r\n        <div className='flex panel'>\r\n            <h1>WebShell</h1>\r\n            <div className='lineTop'/>\r\n            <label>Логин</label>\r\n            <input ref={loginValue} className = 'input' />\r\n            <label>Пароль</label>\r\n            <input ref={passwordValue} className = 'input' />\r\n            <div className='lineBottom'/>\r\n            <button className='button login' onClick={()=>{authorization({Id: 0, Login: loginValue.current?.value,Password: passwordValue.current?.value})}}>Отправить </button>\r\n            <button className='button register'  onClick={() => window.location.href='http://localhost:3000/register'}>Регистрация</button>\r\n        </div>\r\n    )\r\n}","C:\\Project\\ASP.Net\\TestGit\\webshell_front\\src\\Console\\Console.tsx",[],[],"C:\\Project\\ASP.Net\\TestGit\\webshell_front\\src\\Context\\ConsoleContext.tsx",["94","95","96","97","98","99"],[],"import React,{ createContext, FC, PropsWithChildren, useCallback, useContext, useEffect, useReducer } from 'react'\r\nimport { IConsoleOutputDataReducer } from '../Console/Output/Interface/IConsoleOutputDataReducer'\r\nimport { ConsoleOutputDataReducer } from '../Console/Output/Function/ConsoleOutputDataReducer'\r\nimport { ConsoleDataReducer } from '../Console//Output/Function/ConsoleDataReducer'\r\nimport { IConsoleData } from '../Console//Output/Interface/IConsoleData'\r\nimport { TokenContext } from '../Authorization/AuthorizationProvider'\r\nimport { instanceRepository } from '../Server/Command/Repository'\r\nimport { IDataHub } from '../Console/Output/Interface/IDataHub'\r\nimport { serverHub } from '../Server/WebSoket/Hub'\r\n\r\ninterface IDataConsole {\r\n    outputData: IConsoleOutputDataReducer,\r\n    consoleData: IConsoleData,\r\n    sendCommand: (text:string) => Promise<void>,\r\n    stopCommand: () => Promise<void>\r\n}\r\n\r\nconst initalDataConsole : IDataConsole = {\r\n    outputData: {\r\n        output: [],\r\n        isDisabledWrite: false\r\n    },\r\n    consoleData: {\r\n        directory: '', \r\n        history: [], \r\n        subDirectory: [] \r\n    },\r\n\r\n    sendCommand: async (text:string): Promise<void> => {},\r\n    stopCommand: async () : Promise<void> =>{}\r\n}\r\n\r\nexport const DataConsoleContext = createContext<IDataConsole>(initalDataConsole)\r\n\r\nexport const ConsoleDataProvider : FC<PropsWithChildren> = ({children}) => {\r\n    const [outputData, dispatchOutput] = useReducer(ConsoleOutputDataReducer,{output: [], isDisabledWrite: false})\r\n    const [consoleData, dispatchData] = useReducer(ConsoleDataReducer,{ directory: '', history: [], subDirectory: [] })\r\n    const tokenContext = useContext(TokenContext)\r\n    const dataServer = instanceRepository(tokenContext.token)\r\n\r\n    useEffect(() => {\r\n        const connectionToServer = async () : Promise<void> => {\r\n            serverHub.connectionToHubAsync()\r\n            serverHub.sendCommand(getOutputHub)\r\n            await getConsoleDataAsync()\r\n        }\r\n        \r\n        connectionToServer()\r\n    }, []) \r\n    \r\n    const sendCommand = useCallback(async (text : string): Promise<void> => {\r\n        await dataServer.postCommandAsync(text.trim())\r\n        await getConsoleDataAsync()\r\n    },[])\r\n\r\n    const stopCommand = useCallback(async () : Promise<void> => {\r\n        await dataServer.stopCommandAsync()\r\n    },[])\r\n\r\n    const getOutputHub = useCallback((dataHub : IDataHub) : void => {\r\n        const line = dataHub.output\r\n        const status = dataHub.status\r\n        \r\n        const isStopWriteUser = dataHub.status === 0? true : false\r\n        const objectOutput = {status,line}\r\n\r\n        if(line !== '')\r\n            dispatchOutput({type: 'changeAllValue', data: {isDisabledWrite: isStopWriteUser, output: objectOutput}})\r\n    }, [])\r\n\r\n    const getConsoleDataAsync = useCallback(async () : Promise<void> => {\r\n        const currnetDirectory = await dataServer.currnetDirectoryAsync()\r\n        const subDirectory = await dataServer.subDirectoriesAsync()\r\n        const history = await dataServer.getHistoryAsync()\r\n\r\n        const directory = currnetDirectory.replace('\\\"','').replace('\\\"','')\r\n\r\n        dispatchData({type: 'changeAllValue', data: {directory, subDirectory, history}})\r\n    }, [])\r\n\r\n    return(<DataConsoleContext.Provider value={{outputData,consoleData,sendCommand,stopCommand}}>\r\n                {children}\r\n            </DataConsoleContext.Provider>)\r\n}","C:\\Project\\ASP.Net\\TestGit\\webshell_front\\src\\Console\\Output\\Output.tsx",[],[],"C:\\Project\\ASP.Net\\TestGit\\webshell_front\\src\\Console\\Input\\Input.tsx",[],[],"C:\\Project\\ASP.Net\\TestGit\\webshell_front\\src\\Console\\Output\\Function\\ConsoleDataReducer.tsx",[],[],"C:\\Project\\ASP.Net\\TestGit\\webshell_front\\src\\Console\\Output\\Function\\ConsoleOutputDataReducer.tsx",[],[],"C:\\Project\\ASP.Net\\TestGit\\webshell_front\\src\\Console\\Input\\Function\\textProcessing.tsx",[],[],"C:\\Project\\ASP.Net\\TestGit\\webshell_front\\src\\Console\\Input\\Function\\inputReducer.tsx",[],[],"C:\\Project\\ASP.Net\\TestGit\\webshell_front\\src\\Server\\Command\\Repository.tsx",["100"],[],"import { IHistory } from '../../Console/Input/Interface/IHistory'\r\nimport 'ts-replace-all'\r\n\r\nclass Repository {\r\n    token = ''\r\n    constructor(token : string){\r\n       this.token = token.replaceAll('\\\"','')\r\n    }\r\n\r\n    postCommandAsync = async (command : string) : Promise<void> => {\r\n        const urlAddOnServer = 'https://localhost:7145/command/add'\r\n        const dataClient = { id: 0, data: '', textCommand: command }\r\n        if (command !== '') {\r\n            await fetch(urlAddOnServer, {\r\n                method: 'POST',\r\n                redirect: 'follow',\r\n                body: JSON.stringify(dataClient),\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization': \"Bearer \" + this.token\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    currnetDirectoryAsync = async () : Promise<string> => {\r\n        const urlGetDirectory = 'https://localhost:7145/command/getDirectory'\r\n        const responce = await fetch(urlGetDirectory, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n                'Authorization': \"Bearer \" + this.token\r\n            }\r\n        });\r\n        \r\n        return await responce.text()\r\n    }\r\n    \r\n    subDirectoriesAsync = async () : Promise<string[]> => {\r\n        const urlGetDirectories = 'https://localhost:7145/command/getDirectories'\r\n        const responce = await fetch(urlGetDirectories,{headers:{\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            'Authorization': \"Bearer \" + this.token\r\n        }})\r\n        const responceJson = await responce.json()\r\n        const result = await responceJson as string[]\r\n\r\n        return result\r\n    }\r\n\r\n    getHistoryAsync = async () : Promise<IHistory[]> => {\r\n        const urlGetHistory = 'https://localhost:7145/command/getHistory'\r\n        const response = await fetch(urlGetHistory,{headers:{\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            'Authorization': \"Bearer \" + this.token\r\n        }})\r\n        const responceJson = await response.json()\r\n        const result = await responceJson as IHistory[]\r\n\r\n        return result\r\n    }\r\n\r\n    stopCommandAsync = async () : Promise<void> => {\r\n\r\n        const urlStopCommand = 'https://localhost:7145/command/Stop'\r\n        await fetch(urlStopCommand, {\r\n            method: 'POST',\r\n            redirect: 'follow',\r\n            body: JSON.stringify(null),\r\n            headers: {  \r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json', \r\n                'Authorization': \"Bearer \" + this.token\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport const instanceRepository = (token : string) : Repository=>  {\r\n    return new Repository(token)\r\n}","C:\\Project\\ASP.Net\\TestGit\\webshell_front\\src\\Server\\WebSoket\\Hub.tsx",[],[],"C:\\Project\\ASP.Net\\TestGit\\webshell_front\\src\\Console\\Input\\Enum\\ActionKind.tsx",[],[],"C:\\Project\\ASP.Net\\TestGit\\webshell_front\\src\\Console\\Input\\Enum\\StatusKey.tsx",["101"],[],"﻿export enum StatusKey {\r\n    Up = 'ArrowUp',\r\n    Down = 'ArrowDown',\r\n    SendCommand  = 'Enter',\r\n    SwitchSubDirectory = 'Tab',\r\n    Cancel = 'Control',\r\n    Remove = 'Backspace'\r\n}\r\n",{"ruleId":"102","severity":1,"message":"103","line":1,"column":1,"nodeType":"104","messageId":"105","fix":"106"},{"ruleId":"107","severity":1,"message":"108","line":21,"column":46,"nodeType":"109","messageId":"110","endLine":21,"endColumn":47,"suggestions":"111"},{"ruleId":"112","severity":1,"message":"113","line":49,"column":8,"nodeType":"114","endLine":49,"endColumn":10,"suggestions":"115"},{"ruleId":"112","severity":1,"message":"116","line":54,"column":7,"nodeType":"114","endLine":54,"endColumn":9,"suggestions":"117"},{"ruleId":"112","severity":1,"message":"118","line":58,"column":7,"nodeType":"114","endLine":58,"endColumn":9,"suggestions":"119"},{"ruleId":"107","severity":1,"message":"108","line":76,"column":53,"nodeType":"109","messageId":"110","endLine":76,"endColumn":54,"suggestions":"120"},{"ruleId":"107","severity":1,"message":"108","line":76,"column":70,"nodeType":"109","messageId":"110","endLine":76,"endColumn":71,"suggestions":"121"},{"ruleId":"112","severity":1,"message":"118","line":79,"column":8,"nodeType":"114","endLine":79,"endColumn":10,"suggestions":"122"},{"ruleId":"107","severity":1,"message":"108","line":7,"column":39,"nodeType":"109","messageId":"110","endLine":7,"endColumn":40,"suggestions":"123"},{"ruleId":"102","severity":1,"message":"103","line":1,"column":1,"nodeType":"104","messageId":"105","fix":"124"},"unicode-bom","Unexpected Unicode BOM (Byte Order Mark).","Program","unexpected",{"range":"125","text":"126"},"no-useless-escape","Unnecessary escape character: \\\".","Literal","unnecessaryEscape",["127","128"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getConsoleDataAsync' and 'getOutputHub'. Either include them or remove the dependency array.","ArrayExpression",["129"],"React Hook useCallback has missing dependencies: 'dataServer' and 'getConsoleDataAsync'. Either include them or remove the dependency array.",["130"],"React Hook useCallback has a missing dependency: 'dataServer'. Either include it or remove the dependency array.",["131"],["132","133"],["134","135"],["136"],["137","138"],{"range":"139","text":"126"},[-1,0],"",{"messageId":"140","fix":"141","desc":"142"},{"messageId":"143","fix":"144","desc":"145"},{"desc":"146","fix":"147"},{"desc":"148","fix":"149"},{"desc":"150","fix":"151"},{"messageId":"140","fix":"152","desc":"142"},{"messageId":"143","fix":"153","desc":"145"},{"messageId":"140","fix":"154","desc":"142"},{"messageId":"143","fix":"155","desc":"145"},{"desc":"150","fix":"156"},{"messageId":"140","fix":"157","desc":"142"},{"messageId":"143","fix":"158","desc":"145"},[-1,0],"removeEscape",{"range":"159","text":"126"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"160","text":"161"},"Replace the `\\` with `\\\\` to include the actual backslash character.","Update the dependencies array to be: [getConsoleDataAsync, getOutputHub]",{"range":"162","text":"163"},"Update the dependencies array to be: [dataServer, getConsoleDataAsync]",{"range":"164","text":"165"},"Update the dependencies array to be: [dataServer]",{"range":"166","text":"167"},{"range":"168","text":"126"},{"range":"169","text":"161"},{"range":"170","text":"126"},{"range":"171","text":"161"},{"range":"172","text":"167"},{"range":"173","text":"126"},{"range":"174","text":"161"},[706,707],[706,706],"\\",[2062,2064],"[getConsoleDataAsync, getOutputHub]",[2252,2254],"[dataServer, getConsoleDataAsync]",[2377,2379],"[dataServer]",[3145,3146],[3145,3145],[3162,3163],[3162,3162],[3270,3272],[202,203],[202,202]]