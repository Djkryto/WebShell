{"ast":null,"code":"var _jsxFileName = \"C:\\\\Project\\\\ASP.Net\\\\TestGit\\\\webshell_front\\\\src\\\\Authorization\\\\AuthorizationProvider.tsx\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState } from \"react\";\nimport { instanceAuthRepository } from \"../Server/Repository/AuthRepository\";\n\n/*\r\n * Модель токена.\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n/*\r\n * Инициализация токена.\r\n */\nconst initialToken = {\n  token: \"\",\n  isJWT: false,\n  setToken: () => {},\n  setIsJWT: () => {}\n};\n/*\r\n * Создание экземпляра класса .\r\n */\nexport const AuthRepository = instanceAuthRepository();\n/*\r\n * Создание контекста токена.\r\n */\nexport const TokenContext = /*#__PURE__*/createContext(initialToken);\n/*\r\n *  Обертка для работы с авторизацией.\r\n */\nexport const AuthorizationProvider = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  const [token, setToken] = useState(\"\");\n  const [isJWT, setIsJWT] = useState(true);\n  return /*#__PURE__*/_jsxDEV(TokenContext.Provider, {\n    value: {\n      token,\n      isJWT,\n      setToken,\n      setIsJWT\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 13\n  }, this);\n};\n_s(AuthorizationProvider, \"yFSmrrJssl6yYqa/ilrYSRXeHxU=\");\n_c = AuthorizationProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthorizationProvider\");","map":{"version":3,"names":["React","createContext","useState","instanceAuthRepository","initialToken","token","isJWT","setToken","setIsJWT","AuthRepository","TokenContext","AuthorizationProvider","children"],"sources":["C:/Project/ASP.Net/TestGit/webshell_front/src/Authorization/AuthorizationProvider.tsx"],"sourcesContent":["import React,{ createContext, FC, PropsWithChildren, useState } from \"react\"\r\nimport { instanceAuthRepository } from \"../Server/Repository/AuthRepository\"\r\n\r\n/*\r\n * Модель токена.\r\n */\r\nexport type Token = {\r\n    token: string,\r\n    isJWT: boolean,\r\n    setToken: (text:string) => void\r\n    setIsJWT: (text:boolean) => void\r\n}\r\n/*\r\n * Инициализация токена.\r\n */\r\nconst initialToken : Token = {\r\n    token: \"\",\r\n    isJWT: false,\r\n    setToken: () => {},\r\n    setIsJWT: () => {}\r\n}\r\n/*\r\n * Создание экземпляра класса .\r\n */\r\nexport const AuthRepository = instanceAuthRepository();\r\n/*\r\n * Создание контекста токена.\r\n */\r\nexport const TokenContext = createContext(initialToken)\r\n/*\r\n *  Обертка для работы с авторизацией.\r\n */\r\nexport const AuthorizationProvider : FC<PropsWithChildren> = ({children}) => {\r\n    const [token,setToken] = useState(\"\")\r\n    const [isJWT,setIsJWT] = useState(true)\r\n\r\n    return (\r\n            <TokenContext.Provider value={{token,isJWT,setToken,setIsJWT}}>\r\n                {children}\r\n            </TokenContext.Provider>\r\n        )\r\n}"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,aAAa,EAAyBC,QAAQ,QAAQ,OAAO;AAC5E,SAASC,sBAAsB,QAAQ,qCAAqC;;AAE5E;AACA;AACA;AAFA;AASA;AACA;AACA;AACA,MAAMC,YAAoB,GAAG;EACzBC,KAAK,EAAE,EAAE;EACTC,KAAK,EAAE,KAAK;EACZC,QAAQ,EAAE,MAAM,CAAC,CAAC;EAClBC,QAAQ,EAAE,MAAM,CAAC;AACrB,CAAC;AACD;AACA;AACA;AACA,OAAO,MAAMC,cAAc,GAAGN,sBAAsB,EAAE;AACtD;AACA;AACA;AACA,OAAO,MAAMO,YAAY,gBAAGT,aAAa,CAACG,YAAY,CAAC;AACvD;AACA;AACA;AACA,OAAO,MAAMO,qBAA6C,GAAG,QAAgB;EAAA;EAAA,IAAf;IAACC;EAAQ,CAAC;EACpE,MAAM,CAACP,KAAK,EAACE,QAAQ,CAAC,GAAGL,QAAQ,CAAC,EAAE,CAAC;EACrC,MAAM,CAACI,KAAK,EAACE,QAAQ,CAAC,GAAGN,QAAQ,CAAC,IAAI,CAAC;EAEvC,oBACQ,QAAC,YAAY,CAAC,QAAQ;IAAC,KAAK,EAAE;MAACG,KAAK;MAACC,KAAK;MAACC,QAAQ;MAACC;IAAQ,CAAE;IAAA,UACzDI;EAAQ;IAAA;IAAA;IAAA;EAAA,QACW;AAEpC,CAAC;AAAA,GATYD,qBAA6C;AAAA,KAA7CA,qBAA6C;AAAA;AAAA"},"metadata":{},"sourceType":"module"}