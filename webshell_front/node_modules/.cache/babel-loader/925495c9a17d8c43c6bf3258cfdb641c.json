{"ast":null,"code":"import 'ts-replace-all';\nclass Repository {\n  constructor(token, isJWT) {\n    this.token = '';\n    this.headerPost = {\n      method: 'POST',\n      redirect: 'follow',\n      body: JSON.stringify(null),\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': this.token\n      },\n      credentials: 'include'\n    };\n    this.headerGet = {\n      method: 'GET',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n        'Authorization': this.token\n      },\n      credentials: 'include'\n    };\n    this.postCommandAsync = async command => {\n      const urlAddOnServer = 'https://localhost:7145/command/add';\n      const dataClient = {\n        id: 0,\n        data: '',\n        textCommand: command\n      };\n      if (command !== '') await fetch(urlAddOnServer, this.headerPost);\n    };\n    this.currnetDirectoryAsync = async () => {\n      const urlGetDirectory = 'https://localhost:7145/command/getDirectory';\n      const responce = await fetch(urlGetDirectory, this.headerGet);\n      return await responce.text();\n    };\n    this.subDirectoriesAsync = async () => {\n      const urlGetDirectories = 'https://localhost:7145/command/getDirectories';\n      const responce = await fetch(urlGetDirectories, this.headerGet);\n      const responceJson = await responce.json();\n      const result = await responceJson;\n      return result;\n    };\n    this.getHistoryAsync = async () => {\n      const urlGetHistory = 'https://localhost:7145/command/getHistory';\n      const response = await fetch(urlGetHistory, this.headerGet);\n      const responceJson = await response.json();\n      const result = await responceJson;\n      return result;\n    };\n    this.stopCommandAsync = async () => {\n      const urlStopCommand = 'https://localhost:7145/command/Stop';\n      await fetch(urlStopCommand, this.headerPost);\n    };\n    this.token = token.replaceAll('\\\"', '');\n  }\n}\nexport const instanceRepository = (token, isJWT) => {\n  return new Repository(token);\n};","map":{"version":3,"names":["Repository","constructor","token","isJWT","headerPost","method","redirect","body","JSON","stringify","headers","credentials","headerGet","postCommandAsync","command","urlAddOnServer","dataClient","id","data","textCommand","fetch","currnetDirectoryAsync","urlGetDirectory","responce","text","subDirectoriesAsync","urlGetDirectories","responceJson","json","result","getHistoryAsync","urlGetHistory","response","stopCommandAsync","urlStopCommand","replaceAll","instanceRepository"],"sources":["C:/Project/ASP.Net/TestGit/webshell_front/src/Server/Command/Repository.tsx"],"sourcesContent":["import { IHistory } from '../../Console/Input/Interface/IHistory'\r\nimport 'ts-replace-all'\r\n\r\nclass Repository {\r\n    token = ''\r\n    constructor(token : string,isJWT: boolean){\r\n        this.token = token.replaceAll('\\\"','')\r\n    }\r\n    \r\n    headerPost : RequestInit = {\r\n        method: 'POST',\r\n        redirect: 'follow',\r\n        body: JSON.stringify(null),\r\n        headers: {  \r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json', \r\n            'Authorization':  this.token\r\n        },\r\n        credentials: 'include'\r\n    }\r\n\r\n    headerGet : RequestInit = {\r\n        method: 'GET',\r\n        headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            'Authorization':  this.token\r\n        },\r\n        credentials: 'include'\r\n    }\r\n\r\n    postCommandAsync = async (command : string) : Promise<void> => {\r\n        const urlAddOnServer = 'https://localhost:7145/command/add'\r\n        const dataClient = { id: 0, data: '', textCommand: command }\r\n\r\n        if (command !== '')\r\n            await fetch(urlAddOnServer, this.headerPost)\r\n        \r\n    }\r\n\r\n    currnetDirectoryAsync = async () : Promise<string> => {\r\n        const urlGetDirectory = 'https://localhost:7145/command/getDirectory'\r\n        const responce = await fetch(urlGetDirectory, this.headerGet);\r\n        \r\n        return await responce.text()\r\n    }\r\n    \r\n    subDirectoriesAsync = async () : Promise<string[]> => {\r\n        const urlGetDirectories = 'https://localhost:7145/command/getDirectories'\r\n        const responce = await fetch(urlGetDirectories,this.headerGet)\r\n        const responceJson = await responce.json()\r\n        const result = await responceJson as string[]\r\n\r\n        return result\r\n    }\r\n\r\n    getHistoryAsync = async () : Promise<IHistory[]> => {\r\n        const urlGetHistory = 'https://localhost:7145/command/getHistory'\r\n        const response = await fetch(urlGetHistory,this.headerGet)\r\n        const responceJson = await response.json()\r\n        const result = await responceJson as IHistory[]\r\n\r\n        return result\r\n    }\r\n\r\n    stopCommandAsync = async () : Promise<void> => {\r\n        const urlStopCommand = 'https://localhost:7145/command/Stop'\r\n        await fetch(urlStopCommand, this.headerPost)\r\n    }\r\n\r\n}\r\n\r\nexport const instanceRepository = (token : string, isJWT: boolean) : Repository=>  {\r\n    return new Repository(token)\r\n}"],"mappings":"AACA,OAAO,gBAAgB;AAEvB,MAAMA,UAAU,CAAC;EAEbC,WAAW,CAACC,KAAc,EAACC,KAAc,EAAC;IAAA,KAD1CD,KAAK,GAAG,EAAE;IAAA,KAKVE,UAAU,GAAiB;MACvBC,MAAM,EAAE,MAAM;MACdC,QAAQ,EAAE,QAAQ;MAClBC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC,IAAI,CAAC;MAC1BC,OAAO,EAAE;QACL,QAAQ,EAAE,kBAAkB;QAC5B,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAG,IAAI,CAACR;MAC3B,CAAC;MACDS,WAAW,EAAE;IACjB,CAAC;IAAA,KAEDC,SAAS,GAAiB;MACtBP,MAAM,EAAE,KAAK;MACbK,OAAO,EAAE;QACL,QAAQ,EAAE,kBAAkB;QAC5B,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAG,IAAI,CAACR;MAC3B,CAAC;MACDS,WAAW,EAAE;IACjB,CAAC;IAAA,KAEDE,gBAAgB,GAAG,MAAOC,OAAgB,IAAqB;MAC3D,MAAMC,cAAc,GAAG,oCAAoC;MAC3D,MAAMC,UAAU,GAAG;QAAEC,EAAE,EAAE,CAAC;QAAEC,IAAI,EAAE,EAAE;QAAEC,WAAW,EAAEL;MAAQ,CAAC;MAE5D,IAAIA,OAAO,KAAK,EAAE,EACd,MAAMM,KAAK,CAACL,cAAc,EAAE,IAAI,CAACX,UAAU,CAAC;IAEpD,CAAC;IAAA,KAEDiB,qBAAqB,GAAG,YAA8B;MAClD,MAAMC,eAAe,GAAG,6CAA6C;MACrE,MAAMC,QAAQ,GAAG,MAAMH,KAAK,CAACE,eAAe,EAAE,IAAI,CAACV,SAAS,CAAC;MAE7D,OAAO,MAAMW,QAAQ,CAACC,IAAI,EAAE;IAChC,CAAC;IAAA,KAEDC,mBAAmB,GAAG,YAAgC;MAClD,MAAMC,iBAAiB,GAAG,+CAA+C;MACzE,MAAMH,QAAQ,GAAG,MAAMH,KAAK,CAACM,iBAAiB,EAAC,IAAI,CAACd,SAAS,CAAC;MAC9D,MAAMe,YAAY,GAAG,MAAMJ,QAAQ,CAACK,IAAI,EAAE;MAC1C,MAAMC,MAAM,GAAG,MAAMF,YAAwB;MAE7C,OAAOE,MAAM;IACjB,CAAC;IAAA,KAEDC,eAAe,GAAG,YAAkC;MAChD,MAAMC,aAAa,GAAG,2CAA2C;MACjE,MAAMC,QAAQ,GAAG,MAAMZ,KAAK,CAACW,aAAa,EAAC,IAAI,CAACnB,SAAS,CAAC;MAC1D,MAAMe,YAAY,GAAG,MAAMK,QAAQ,CAACJ,IAAI,EAAE;MAC1C,MAAMC,MAAM,GAAG,MAAMF,YAA0B;MAE/C,OAAOE,MAAM;IACjB,CAAC;IAAA,KAEDI,gBAAgB,GAAG,YAA4B;MAC3C,MAAMC,cAAc,GAAG,qCAAqC;MAC5D,MAAMd,KAAK,CAACc,cAAc,EAAE,IAAI,CAAC9B,UAAU,CAAC;IAChD,CAAC;IA9DG,IAAI,CAACF,KAAK,GAAGA,KAAK,CAACiC,UAAU,CAAC,IAAI,EAAC,EAAE,CAAC;EAC1C;AA+DJ;AAEA,OAAO,MAAMC,kBAAkB,GAAG,CAAClC,KAAc,EAAEC,KAAc,KAAkB;EAC/E,OAAO,IAAIH,UAAU,CAACE,KAAK,CAAC;AAChC,CAAC"},"metadata":{},"sourceType":"module"}