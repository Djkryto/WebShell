{"ast":null,"code":"import 'ts-replace-all';\nclass Repository {\n  constructor(token) {\n    this.token = '';\n    this.header = {\n      GET: {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n          'Authorization': \"Bearer: \" + this.token\n        }\n      },\n      POST: {}\n    };\n    this.postCommandAsync = async command => {\n      const urlAddOnServer = 'https://localhost:7145/command/add';\n      const dataClient = {\n        id: 0,\n        data: '',\n        textCommand: command\n      };\n      if (command !== '') {\n        await fetch(urlAddOnServer, {\n          method: 'POST',\n          redirect: 'follow',\n          body: JSON.stringify(dataClient),\n          headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json',\n            'Authorization': this.token\n          },\n          credentials: 'include'\n        });\n      }\n    };\n    this.currnetDirectoryAsync = async () => {\n      const urlGetDirectory = 'https://localhost:7145/command/getDirectory';\n      const responce = await fetch(urlGetDirectory, {\n        method: 'GET',\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        credentials: 'include'\n      });\n      return await responce.text();\n    };\n    this.subDirectoriesAsync = async () => {\n      const urlGetDirectories = 'https://localhost:7145/command/getDirectories';\n      const responce = await fetch(urlGetDirectories, {\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n          'Authorization': this.token\n        },\n        credentials: 'include'\n      });\n      const responceJson = await responce.json();\n      const result = await responceJson;\n      return result;\n    };\n    this.getHistoryAsync = async () => {\n      const urlGetHistory = 'https://localhost:7145/command/getHistory';\n      const response = await fetch(urlGetHistory, {\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n          'Authorization': this.token\n        },\n        credentials: 'include'\n      });\n      const responceJson = await response.json();\n      const result = await responceJson;\n      return result;\n    };\n    this.stopCommandAsync = async () => {\n      const urlStopCommand = 'https://localhost:7145/command/Stop';\n      await fetch(urlStopCommand, {\n        method: 'POST',\n        redirect: 'follow',\n        body: JSON.stringify(null),\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json',\n          'Authorization': this.token\n        },\n        credentials: 'include'\n      });\n    };\n    this.token = token.replaceAll('\\\"', '');\n  }\n}\nexport const instanceRepository = token => {\n  return new Repository(token);\n};","map":{"version":3,"names":["Repository","constructor","token","header","GET","method","headers","POST","postCommandAsync","command","urlAddOnServer","dataClient","id","data","textCommand","fetch","redirect","body","JSON","stringify","credentials","currnetDirectoryAsync","urlGetDirectory","responce","text","subDirectoriesAsync","urlGetDirectories","responceJson","json","result","getHistoryAsync","urlGetHistory","response","stopCommandAsync","urlStopCommand","replaceAll","instanceRepository"],"sources":["C:/Project/ASP.Net/TestGit/webshell_front/src/Server/Command/Repository.tsx"],"sourcesContent":["import { IHistory } from '../../Console/Input/Interface/IHistory'\r\nimport 'ts-replace-all'\r\n\r\nclass Repository {\r\n    token = ''\r\n    header = { \r\n        GET: {\r\n            method: 'GET',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n                'Authorization': \"Bearer: \" + this.token\r\n            },\r\n        },\r\n        POST: {\r\n\r\n        } \r\n    }\r\n\r\n\r\n    constructor(token : string){\r\n       this.token = token.replaceAll('\\\"','')\r\n    }\r\n\r\n    postCommandAsync = async (command : string) : Promise<void> => {\r\n        const urlAddOnServer = 'https://localhost:7145/command/add'\r\n        const dataClient = { id: 0, data: '', textCommand: command }\r\n        if (command !== '') {\r\n            await fetch(urlAddOnServer, {\r\n                method: 'POST',\r\n                redirect: 'follow',\r\n                body: JSON.stringify(dataClient),\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json',\r\n                    'Authorization':  this.token\r\n                },\r\n                credentials: 'include'\r\n            })\r\n        }\r\n    }\r\n\r\n    currnetDirectoryAsync = async () : Promise<string> => {\r\n        const urlGetDirectory = 'https://localhost:7145/command/getDirectory'\r\n        const responce = await fetch(urlGetDirectory, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n            },\r\n            credentials: 'include'\r\n        });\r\n        \r\n        return await responce.text()\r\n    }\r\n    \r\n    subDirectoriesAsync = async () : Promise<string[]> => {\r\n        const urlGetDirectories = 'https://localhost:7145/command/getDirectories'\r\n        const responce = await fetch(urlGetDirectories,{\r\n            headers:{\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            'Authorization':  this.token\r\n        }, \r\n            credentials: 'include'\r\n        })\r\n        const responceJson = await responce.json()\r\n        const result = await responceJson as string[]\r\n\r\n        return result\r\n    }\r\n\r\n    getHistoryAsync = async () : Promise<IHistory[]> => {\r\n        const urlGetHistory = 'https://localhost:7145/command/getHistory'\r\n        const response = await fetch(urlGetHistory,{\r\n            headers:{\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json',\r\n            'Authorization':  this.token\r\n        },  credentials: 'include'\r\n        })\r\n        const responceJson = await response.json()\r\n        const result = await responceJson as IHistory[]\r\n\r\n        return result\r\n    }\r\n\r\n    stopCommandAsync = async () : Promise<void> => {\r\n\r\n        const urlStopCommand = 'https://localhost:7145/command/Stop'\r\n        await fetch(urlStopCommand, {\r\n            method: 'POST',\r\n            redirect: 'follow',\r\n            body: JSON.stringify(null),\r\n            headers: {  \r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json', \r\n                'Authorization':  this.token\r\n            },\r\n             credentials: 'include'\r\n        })\r\n    }\r\n}\r\n\r\nexport const instanceRepository = (token : string) : Repository=>  {\r\n    return new Repository(token)\r\n}"],"mappings":"AACA,OAAO,gBAAgB;AAEvB,MAAMA,UAAU,CAAC;EAiBbC,WAAW,CAACC,KAAc,EAAC;IAAA,KAhB3BA,KAAK,GAAG,EAAE;IAAA,KACVC,MAAM,GAAG;MACLC,GAAG,EAAE;QACDC,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACL,QAAQ,EAAE,kBAAkB;UAC5B,cAAc,EAAE,kBAAkB;UAClC,eAAe,EAAE,UAAU,GAAG,IAAI,CAACJ;QACvC;MACJ,CAAC;MACDK,IAAI,EAAE,CAEN;IACJ,CAAC;IAAA,KAODC,gBAAgB,GAAG,MAAOC,OAAgB,IAAqB;MAC3D,MAAMC,cAAc,GAAG,oCAAoC;MAC3D,MAAMC,UAAU,GAAG;QAAEC,EAAE,EAAE,CAAC;QAAEC,IAAI,EAAE,EAAE;QAAEC,WAAW,EAAEL;MAAQ,CAAC;MAC5D,IAAIA,OAAO,KAAK,EAAE,EAAE;QAChB,MAAMM,KAAK,CAACL,cAAc,EAAE;UACxBL,MAAM,EAAE,MAAM;UACdW,QAAQ,EAAE,QAAQ;UAClBC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACR,UAAU,CAAC;UAChCL,OAAO,EAAE;YACL,QAAQ,EAAE,kBAAkB;YAC5B,cAAc,EAAE,kBAAkB;YAClC,eAAe,EAAG,IAAI,CAACJ;UAC3B,CAAC;UACDkB,WAAW,EAAE;QACjB,CAAC,CAAC;MACN;IACJ,CAAC;IAAA,KAEDC,qBAAqB,GAAG,YAA8B;MAClD,MAAMC,eAAe,GAAG,6CAA6C;MACrE,MAAMC,QAAQ,GAAG,MAAMR,KAAK,CAACO,eAAe,EAAE;QAC1CjB,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACL,QAAQ,EAAE,kBAAkB;UAC5B,cAAc,EAAE;QACpB,CAAC;QACDc,WAAW,EAAE;MACjB,CAAC,CAAC;MAEF,OAAO,MAAMG,QAAQ,CAACC,IAAI,EAAE;IAChC,CAAC;IAAA,KAEDC,mBAAmB,GAAG,YAAgC;MAClD,MAAMC,iBAAiB,GAAG,+CAA+C;MACzE,MAAMH,QAAQ,GAAG,MAAMR,KAAK,CAACW,iBAAiB,EAAC;QAC3CpB,OAAO,EAAC;UACR,QAAQ,EAAE,kBAAkB;UAC5B,cAAc,EAAE,kBAAkB;UAClC,eAAe,EAAG,IAAI,CAACJ;QAC3B,CAAC;QACGkB,WAAW,EAAE;MACjB,CAAC,CAAC;MACF,MAAMO,YAAY,GAAG,MAAMJ,QAAQ,CAACK,IAAI,EAAE;MAC1C,MAAMC,MAAM,GAAG,MAAMF,YAAwB;MAE7C,OAAOE,MAAM;IACjB,CAAC;IAAA,KAEDC,eAAe,GAAG,YAAkC;MAChD,MAAMC,aAAa,GAAG,2CAA2C;MACjE,MAAMC,QAAQ,GAAG,MAAMjB,KAAK,CAACgB,aAAa,EAAC;QACvCzB,OAAO,EAAC;UACR,QAAQ,EAAE,kBAAkB;UAC5B,cAAc,EAAE,kBAAkB;UAClC,eAAe,EAAG,IAAI,CAACJ;QAC3B,CAAC;QAAGkB,WAAW,EAAE;MACjB,CAAC,CAAC;MACF,MAAMO,YAAY,GAAG,MAAMK,QAAQ,CAACJ,IAAI,EAAE;MAC1C,MAAMC,MAAM,GAAG,MAAMF,YAA0B;MAE/C,OAAOE,MAAM;IACjB,CAAC;IAAA,KAEDI,gBAAgB,GAAG,YAA4B;MAE3C,MAAMC,cAAc,GAAG,qCAAqC;MAC5D,MAAMnB,KAAK,CAACmB,cAAc,EAAE;QACxB7B,MAAM,EAAE,MAAM;QACdW,QAAQ,EAAE,QAAQ;QAClBC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC,IAAI,CAAC;QAC1Bb,OAAO,EAAE;UACL,QAAQ,EAAE,kBAAkB;UAC5B,cAAc,EAAE,kBAAkB;UAClC,eAAe,EAAG,IAAI,CAACJ;QAC3B,CAAC;QACAkB,WAAW,EAAE;MAClB,CAAC,CAAC;IACN,CAAC;IAhFE,IAAI,CAAClB,KAAK,GAAGA,KAAK,CAACiC,UAAU,CAAC,IAAI,EAAC,EAAE,CAAC;EACzC;AAgFJ;AAEA,OAAO,MAAMC,kBAAkB,GAAIlC,KAAc,IAAkB;EAC/D,OAAO,IAAIF,UAAU,CAACE,KAAK,CAAC;AAChC,CAAC"},"metadata":{},"sourceType":"module"}