{"ast":null,"code":"import 'ts-replace-all';\nconst initFetch = data => {\n  return {\n    method: 'POST',\n    body: JSON.stringify(data),\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    credentials: 'include'\n  };\n};\n\n/*\r\n* Класс хранящий запросы к серверу.\r\n*/\nclass AuthRepository {\n  constructor() {\n    this.registration = async (data, navigate) => {\n      const urlRegister = 'https://localhost:7145/auth/register';\n      await fetch(urlRegister, initFetch(data));\n      navigate('login');\n    };\n    this.authorization = async (data, tokenContext, navigate) => {\n      const urlLogin = 'https://localhost:7145/auth/login';\n      const isJWT = tokenContext.isJWT;\n      const clientData = {\n        User: data,\n        isJWT: isJWT\n      };\n      const responce = await fetch(urlLogin, initFetch(clientData));\n      await responce.text().then(promise => {\n        if (isJWT) {\n          console.log('Jwt: ' + promise);\n          tokenContext.setToken(promise);\n        } else {\n          console.log('Cookie: ' + promise + '\\n' + 'token ' + document.cookie);\n          tokenContext.setToken(document.cookie);\n        }\n        navigate('/console');\n      });\n      navigate('/console');\n    };\n  }\n}\n/*\r\n * Функция возвращающая экземпляр класса.\r\n */\nexport const instanceAuthRepository = () => {\n  return new AuthRepository();\n};","map":{"version":3,"names":["initFetch","data","method","body","JSON","stringify","headers","credentials","AuthRepository","registration","navigate","urlRegister","fetch","authorization","tokenContext","urlLogin","isJWT","clientData","User","responce","text","then","promise","console","log","setToken","document","cookie","instanceAuthRepository"],"sources":["C:/Project/ASP.Net/TestGit/webshell_front/src/Server/Command/AuthRepository.tsx"],"sourcesContent":["import { ClientData, User } from '../../Authorization/Component/Login'\r\nimport { Token } from '../../Authorization/AuthorizationProvider'\r\nimport { NavigateFunction } from 'react-router-dom'\r\nimport 'ts-replace-all'\r\n\r\nconst initFetch = (data : User | ClientData): RequestInit  => {\r\n    return {\r\n        method: 'POST',\r\n        body:  JSON.stringify(data),\r\n        headers: {'Content-Type': 'application/json'},\r\n        credentials: 'include'\r\n    }\r\n}\r\n\r\n/*\r\n* Класс хранящий запросы к серверу.\r\n*/\r\nclass AuthRepository {\r\n    /*\r\n    * Регистрация пользователя.\r\n    */\r\n    registration = async (data : User, navigate : NavigateFunction) : Promise<void> => {\r\n        const urlRegister = 'https://localhost:7145/auth/register'\r\n        await fetch (urlRegister,initFetch(data))\r\n\r\n        navigate('login')\r\n    }\r\n    /*\r\n    * Авторизация пользователя с jwt или cookie.\r\n    */\r\n    authorization = async (data : User, tokenContext : Token, navigate : NavigateFunction) : Promise<void> => {\r\n        const urlLogin = 'https://localhost:7145/auth/login'\r\n        const isJWT = tokenContext.isJWT;\r\n        const clientData : ClientData = {User: data, isJWT:isJWT}\r\n        const responce = await fetch (urlLogin,initFetch(clientData))\r\n        await responce.text().then(\r\n            (promise : string) =>{if(isJWT){\r\n                console.log('Jwt: '+ promise)\r\n                tokenContext.setToken(promise)\r\n            }\r\n            else {\r\n                console.log('Cookie: '+ promise + '\\n'+'token ' + document.cookie)\r\n                tokenContext.setToken(document.cookie)\r\n            }\r\n            navigate('/console')\r\n        }\r\n        )\r\n\r\n\r\n       \r\n          navigate('/console')\r\n          \r\n    }\r\n}\r\n/*\r\n * Функция возвращающая экземпляр класса.\r\n */\r\nexport const instanceAuthRepository = () : AuthRepository => {return new AuthRepository()}"],"mappings":"AAGA,OAAO,gBAAgB;AAEvB,MAAMA,SAAS,GAAIC,IAAwB,IAAmB;EAC1D,OAAO;IACHC,MAAM,EAAE,MAAM;IACdC,IAAI,EAAGC,IAAI,CAACC,SAAS,CAACJ,IAAI,CAAC;IAC3BK,OAAO,EAAE;MAAC,cAAc,EAAE;IAAkB,CAAC;IAC7CC,WAAW,EAAE;EACjB,CAAC;AACL,CAAC;;AAED;AACA;AACA;AACA,MAAMC,cAAc,CAAC;EAAA;IAAA,KAIjBC,YAAY,GAAG,OAAOR,IAAW,EAAES,QAA2B,KAAqB;MAC/E,MAAMC,WAAW,GAAG,sCAAsC;MAC1D,MAAMC,KAAK,CAAED,WAAW,EAACX,SAAS,CAACC,IAAI,CAAC,CAAC;MAEzCS,QAAQ,CAAC,OAAO,CAAC;IACrB,CAAC;IAAA,KAIDG,aAAa,GAAG,OAAOZ,IAAW,EAAEa,YAAoB,EAAEJ,QAA2B,KAAqB;MACtG,MAAMK,QAAQ,GAAG,mCAAmC;MACpD,MAAMC,KAAK,GAAGF,YAAY,CAACE,KAAK;MAChC,MAAMC,UAAuB,GAAG;QAACC,IAAI,EAAEjB,IAAI;QAAEe,KAAK,EAACA;MAAK,CAAC;MACzD,MAAMG,QAAQ,GAAG,MAAMP,KAAK,CAAEG,QAAQ,EAACf,SAAS,CAACiB,UAAU,CAAC,CAAC;MAC7D,MAAME,QAAQ,CAACC,IAAI,EAAE,CAACC,IAAI,CACrBC,OAAgB,IAAI;QAAC,IAAGN,KAAK,EAAC;UAC3BO,OAAO,CAACC,GAAG,CAAC,OAAO,GAAEF,OAAO,CAAC;UAC7BR,YAAY,CAACW,QAAQ,CAACH,OAAO,CAAC;QAClC,CAAC,MACI;UACDC,OAAO,CAACC,GAAG,CAAC,UAAU,GAAEF,OAAO,GAAG,IAAI,GAAC,QAAQ,GAAGI,QAAQ,CAACC,MAAM,CAAC;UAClEb,YAAY,CAACW,QAAQ,CAACC,QAAQ,CAACC,MAAM,CAAC;QAC1C;QACAjB,QAAQ,CAAC,UAAU,CAAC;MACxB,CAAC,CACA;MAICA,QAAQ,CAAC,UAAU,CAAC;IAE1B,CAAC;EAAA;AACL;AACA;AACA;AACA;AACA,OAAO,MAAMkB,sBAAsB,GAAG,MAAuB;EAAC,OAAO,IAAIpB,cAAc,EAAE;AAAA,CAAC"},"metadata":{},"sourceType":"module"}