{"ast":null,"code":"import 'ts-replace-all';\nconst initialHeader = {\n  GET: () => {\n    return {};\n  },\n  POST(dataClient) {\n    return dataClient;\n  }\n};\n/*\r\n* Класс хранящий запросы к серверу.\r\n*/\nclass Repository {\n  // token = ''\n  // header = initialHeader\n  // headerJWT : HeaderRequest = { \n  //     GET: () : RequestInit => {\n  //         return {\n  //             method: 'GET',\n  //             headers: {\n  //                 'Accept': 'application/json',\n  //                 'Content-Type': 'application/json',\n  //                 'Authorization': \"Bearer \" + this.token\n  //             },\n  //         }\n  //     },\n  //     POST: (dataClient : any) : RequestInit => {\n  //         return { \n  //             method: 'POST',\n  //             redirect: 'follow',\n  //             body: JSON.stringify(dataClient),\n  //             headers: {\n  //                 'Accept': 'application/json',\n  //                 'Content-Type': 'application/json',\n  //                 'Authorization': \"Bearer \" + this.token\n  //             },\n  //         }\n  //     } \n  // }\n\n  // headerCookie : HeaderRequest = { \n  //     GET: () : RequestInit => {\n  //         return {\n  //             method: 'GET',\n  //             headers: {\n  //                 'Accept': 'application/json',\n  //                 'Content-Type': 'application/json',\n  //             },\n  //             credentials: 'include'\n  //         }\n  //     },\n  //     POST: (dataClient : any) : RequestInit => {\n  //       return { \n  //             method: 'POST',\n  //             redirect: 'follow',\n  //             body: JSON.stringify(dataClient),\n  //             headers: {\n  //                 'Accept': 'application/json',\n  //                 'Content-Type': 'application/json',\n  //             },\n  //             credentials: 'include'\n  //         }\n  //     } \n  // }\n\n  // constructor(token : string,isJWT :boolean){\n  //    this.token = token.replaceAll('\\\"','')\n  //    if(isJWT)\n  //         this.header = this.headerJWT;\n  //     else\n  //         this.header = this.headerCookie;\n  // }\n  // /*\n  // * Функция для отправка комманд серверу.\n  // */\n  // postCommandAsync = async (command : string) : Promise<void> => {\n  //     const urlAddOnServer = 'https://localhost:7145/command/add'\n  //     const dataClient = { id: 0, data: '', textCommand: command }\n  //     if (command !== '') {\n  //         await fetch(urlAddOnServer, this.header.POST(dataClient))\n  //     }\n  // }\n  // /*\n  // * Функция для получения от сервера текущую директорию.\n  // */\n  // currnetDirectoryAsync = async () : Promise<string> => {\n  //     const urlGetDirectory = 'https://localhost:7145/command/getDirectory'\n  //     const responce = await fetch(urlGetDirectory, this.header.GET());\n\n  //     return await responce.text()\n  // }\n  // /*\n  // * Функция для получения от сервера под директории.\n  // */\n  // subDirectoriesAsync = async () : Promise<string[]> => {\n  //     const urlGetDirectories = 'https://localhost:7145/command/getDirectories'\n  //     const responce = await fetch(urlGetDirectories,this.header.GET())\n\n  //     const responceJson = await responce.json()\n  //     const result = await responceJson as string[]\n\n  //     return result\n  // }\n  // /*\n  // * Функция для получения от сервера список историй команд.\n  // */\n  // getHistoryAsync = async () : Promise<IHistory[]> => {\n  //     const urlGetHistory = 'https://localhost:7145/command/getHistory'\n  //     const response = await fetch(urlGetHistory,this.header.GET())\n  //     const responceJson = await response.json()\n  //     const result = await responceJson as IHistory[]\n\n  //     return result\n  // }\n  // /*\n  // * Функция отмены выполнения действия на сервере от прошлой команды.\n  // */\n  // stopCommandAsync = async () : Promise<void> => {\n\n  //     const urlStopCommand = 'https://localhost:7145/command/Stop'\n  //     await fetch(urlStopCommand, this.header.POST(null))\n  // }\n}\n\n// export const instanceRepository = (token : string,isJWT : boolean) : Repository=>  {\n//     return new Repository(token,isJWT)\n// }","map":{"version":3,"names":["initialHeader","GET","POST","dataClient","Repository"],"sources":["C:/Project/ASP.Net/TestGit/webshell_front/src/Server/Command/Repository.tsx"],"sourcesContent":["import { IHistory } from '../../Console/Input/Interface/IHistory'\r\nimport 'ts-replace-all'\r\n\r\ntype HeaderRequest = {\r\n    GET: () => RequestInit,\r\n    POST: (dataClient : any) => RequestInit\r\n}\r\n\r\nconst initialHeader : HeaderRequest= {\r\n    GET:() : RequestInit=> {return {}},\r\n    POST(dataClient) {\r\n        return dataClient\r\n    },\r\n}\r\n/*\r\n* Класс хранящий запросы к серверу.\r\n*/\r\nclass Repository {\r\n    // token = ''\r\n    // header = initialHeader\r\n    // headerJWT : HeaderRequest = { \r\n    //     GET: () : RequestInit => {\r\n    //         return {\r\n    //             method: 'GET',\r\n    //             headers: {\r\n    //                 'Accept': 'application/json',\r\n    //                 'Content-Type': 'application/json',\r\n    //                 'Authorization': \"Bearer \" + this.token\r\n    //             },\r\n    //         }\r\n    //     },\r\n    //     POST: (dataClient : any) : RequestInit => {\r\n    //         return { \r\n    //             method: 'POST',\r\n    //             redirect: 'follow',\r\n    //             body: JSON.stringify(dataClient),\r\n    //             headers: {\r\n    //                 'Accept': 'application/json',\r\n    //                 'Content-Type': 'application/json',\r\n    //                 'Authorization': \"Bearer \" + this.token\r\n    //             },\r\n    //         }\r\n    //     } \r\n    // }\r\n\r\n    // headerCookie : HeaderRequest = { \r\n    //     GET: () : RequestInit => {\r\n    //         return {\r\n    //             method: 'GET',\r\n    //             headers: {\r\n    //                 'Accept': 'application/json',\r\n    //                 'Content-Type': 'application/json',\r\n    //             },\r\n    //             credentials: 'include'\r\n    //         }\r\n    //     },\r\n    //     POST: (dataClient : any) : RequestInit => {\r\n    //       return { \r\n    //             method: 'POST',\r\n    //             redirect: 'follow',\r\n    //             body: JSON.stringify(dataClient),\r\n    //             headers: {\r\n    //                 'Accept': 'application/json',\r\n    //                 'Content-Type': 'application/json',\r\n    //             },\r\n    //             credentials: 'include'\r\n    //         }\r\n    //     } \r\n    // }\r\n\r\n    // constructor(token : string,isJWT :boolean){\r\n    //    this.token = token.replaceAll('\\\"','')\r\n    //    if(isJWT)\r\n    //         this.header = this.headerJWT;\r\n    //     else\r\n    //         this.header = this.headerCookie;\r\n    // }\r\n    // /*\r\n    // * Функция для отправка комманд серверу.\r\n    // */\r\n    // postCommandAsync = async (command : string) : Promise<void> => {\r\n    //     const urlAddOnServer = 'https://localhost:7145/command/add'\r\n    //     const dataClient = { id: 0, data: '', textCommand: command }\r\n    //     if (command !== '') {\r\n    //         await fetch(urlAddOnServer, this.header.POST(dataClient))\r\n    //     }\r\n    // }\r\n    // /*\r\n    // * Функция для получения от сервера текущую директорию.\r\n    // */\r\n    // currnetDirectoryAsync = async () : Promise<string> => {\r\n    //     const urlGetDirectory = 'https://localhost:7145/command/getDirectory'\r\n    //     const responce = await fetch(urlGetDirectory, this.header.GET());\r\n        \r\n    //     return await responce.text()\r\n    // }\r\n    // /*\r\n    // * Функция для получения от сервера под директории.\r\n    // */\r\n    // subDirectoriesAsync = async () : Promise<string[]> => {\r\n    //     const urlGetDirectories = 'https://localhost:7145/command/getDirectories'\r\n    //     const responce = await fetch(urlGetDirectories,this.header.GET())\r\n\r\n    //     const responceJson = await responce.json()\r\n    //     const result = await responceJson as string[]\r\n\r\n    //     return result\r\n    // }\r\n    // /*\r\n    // * Функция для получения от сервера список историй команд.\r\n    // */\r\n    // getHistoryAsync = async () : Promise<IHistory[]> => {\r\n    //     const urlGetHistory = 'https://localhost:7145/command/getHistory'\r\n    //     const response = await fetch(urlGetHistory,this.header.GET())\r\n    //     const responceJson = await response.json()\r\n    //     const result = await responceJson as IHistory[]\r\n\r\n    //     return result\r\n    // }\r\n    // /*\r\n    // * Функция отмены выполнения действия на сервере от прошлой команды.\r\n    // */\r\n    // stopCommandAsync = async () : Promise<void> => {\r\n\r\n    //     const urlStopCommand = 'https://localhost:7145/command/Stop'\r\n    //     await fetch(urlStopCommand, this.header.POST(null))\r\n    // }\r\n}\r\n\r\n// export const instanceRepository = (token : string,isJWT : boolean) : Repository=>  {\r\n//     return new Repository(token,isJWT)\r\n// }"],"mappings":"AACA,OAAO,gBAAgB;AAOvB,MAAMA,aAA6B,GAAE;EACjCC,GAAG,EAAC,MAAmB;IAAC,OAAO,CAAC,CAAC;EAAA,CAAC;EAClCC,IAAI,CAACC,UAAU,EAAE;IACb,OAAOA,UAAU;EACrB;AACJ,CAAC;AACD;AACA;AACA;AACA,MAAMC,UAAU,CAAC;EACb;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;AAAA;;AAGJ;AACA;AACA"},"metadata":{},"sourceType":"module"}