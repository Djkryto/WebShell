{"ast":null,"code":"var _jsxFileName = \"C:\\\\Project\\\\ASP.Net\\\\WebShell_2\\\\TaskDNS\\\\ClientApp\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\n// @ts-nocheck\nimport { serverSignalR } from './Server/WebSoket(SignalR)/SignalR';\nimport { dataServer } from './Server/Command/Repository';\nimport { useEffect, useState } from 'react';\nimport { Output } from './Output/Output';\nimport { Input } from './Input/Input';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const App = () => {\n  _s();\n  const [directory, setDirectory] = useState('');\n  const [history, setHistory] = useState();\n  const [output, setOutput] = useState([]);\n  const [subDirectory, setSubDirectory] = useState();\n  const [isDisabledWrite, setIsDisabledWrite] = useState(false);\n  useEffect(() => {\n    const start = async () => {\n      serverSignalR.connectionToHubAsync();\n      serverSignalR.sendCommand(changeOutput);\n      await getHistoryAsync();\n      await getDirectoryAsync();\n      await getSubDirectoryAsync();\n    };\n    start();\n  }, []);\n  const onEnterPress = async text => {\n    dataServer.postCommandAsync(text.trim());\n    await getHistoryAsync();\n    await getDirectoryAsync();\n    await getSubDirectoryAsync();\n  };\n  const stopCommand = async () => {\n    dataServer.stopCommandAsync();\n  };\n  const changeOutput = dataHub => {\n    const line = dataHub.output;\n    const status = dataHub.status;\n    if (line !== '') {\n      setIsDisabledWrite(status === 0 ? true : false);\n      setOutput(output => [...output, {\n        status,\n        line\n      }]);\n    }\n  };\n  const getDirectoryAsync = async () => {\n    setDirectory((await dataServer.currnetDirectoryAsync()).replaceAll('\"', ''));\n  };\n  const getSubDirectoryAsync = async () => {\n    setSubDirectory(await dataServer.subDirectoriesAsync());\n  };\n  const getHistoryAsync = async () => {\n    setHistory(await dataServer.getHistoryAsync());\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"console\",\n    children: [/*#__PURE__*/_jsxDEV(Output, {\n      output: output\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Input, {\n      isDisabledWrite: isDisabledWrite,\n      sendCommand: onEnterPress,\n      stopCommand: stopCommand,\n      serverDirectory: directory,\n      subDirectory: subDirectory,\n      history: history\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 9\n  }, this);\n};\n_s(App, \"U7rdBcmm9jXMEGT41Zj7qhqPfUQ=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["serverSignalR","dataServer","useEffect","useState","Output","Input","App","directory","setDirectory","history","setHistory","output","setOutput","subDirectory","setSubDirectory","isDisabledWrite","setIsDisabledWrite","start","connectionToHubAsync","sendCommand","changeOutput","getHistoryAsync","getDirectoryAsync","getSubDirectoryAsync","onEnterPress","text","postCommandAsync","trim","stopCommand","stopCommandAsync","dataHub","line","status","currnetDirectoryAsync","replaceAll","subDirectoriesAsync"],"sources":["C:/Project/ASP.Net/WebShell_2/TaskDNS/ClientApp/src/App.tsx"],"sourcesContent":["// @ts-nocheck\r\nimport { serverSignalR } from './Server/WebSoket(SignalR)/SignalR'\r\nimport { dataServer } from './Server/Command/Repository'\r\nimport { useEffect, useState } from 'react'\r\nimport { Output } from './Output/Output'\r\nimport { Input } from './Input/Input'\r\nimport { FC } from 'react'\r\n\r\nexport const App = () : FC => {\r\n    const [directory, setDirectory] = useState('')\r\n    const [history,setHistory] = useState<string[]>()\r\n    const [output, setOutput] = useState<IWriteOutput>([])\r\n    const [subDirectory,setSubDirectory] = useState<string[]>()\r\n    const [isDisabledWrite,setIsDisabledWrite] = useState(false)\r\n\r\n    useEffect(() => {\r\n        const start = async () : Promise<void> =>{\r\n            serverSignalR.connectionToHubAsync()\r\n            serverSignalR.sendCommand(changeOutput)\r\n            await getHistoryAsync()\r\n            await getDirectoryAsync()\r\n            await getSubDirectoryAsync()\r\n        }\r\n\r\n        start()\r\n    }, [])\r\n\r\n    const onEnterPress = async (text : string): Promise<void> => {\r\n        dataServer.postCommandAsync(text.trim())\r\n        await getHistoryAsync()\r\n        await getDirectoryAsync()\r\n        await getSubDirectoryAsync()\r\n    }\r\n\r\n    const stopCommand = async () : Promise<void> => {\r\n        dataServer.stopCommandAsync()\r\n    }\r\n\r\n    const changeOutput = (dataHub) : void => {\r\n        const line = dataHub.output as string\r\n        const status = dataHub.status as number\r\n        \r\n        if(line !== ''){\r\n            setIsDisabledWrite(status === 0? true : false)\r\n            setOutput((output) => [...output,{status ,line}])\r\n        }\r\n    }\r\n\r\n    const getDirectoryAsync = async () : void =>{\r\n        setDirectory((await dataServer.currnetDirectoryAsync()).replaceAll('\"',''))\r\n    }\r\n\r\n    const getSubDirectoryAsync = async () : void =>{\r\n        setSubDirectory(await dataServer.subDirectoriesAsync())\r\n    }\r\n\r\n    const getHistoryAsync =async () : void =>{\r\n        setHistory(await dataServer.getHistoryAsync())\r\n    }\r\n\r\n    return (\r\n        <div className='console'>\r\n            <Output output = {output}/>\r\n            <Input \r\n            isDisabledWrite={isDisabledWrite} \r\n            sendCommand = {onEnterPress}\r\n            stopCommand = {stopCommand}\r\n            serverDirectory={directory}  \r\n            subDirectory={subDirectory}\r\n            history = {history}\r\n            />\r\n        </div>\r\n    );\r\n}"],"mappings":";;AAAA;AACA,SAASA,aAAa,QAAQ,oCAAoC;AAClE,SAASC,UAAU,QAAQ,6BAA6B;AACxD,SAASC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,MAAM,QAAQ,iBAAiB;AACxC,SAASC,KAAK,QAAQ,eAAe;AAAA;AAGrC,OAAO,MAAMC,GAAG,GAAG,MAAW;EAAA;EAC1B,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGL,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACM,OAAO,EAACC,UAAU,CAAC,GAAGP,QAAQ,EAAY;EACjD,MAAM,CAACQ,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAAe,EAAE,CAAC;EACtD,MAAM,CAACU,YAAY,EAACC,eAAe,CAAC,GAAGX,QAAQ,EAAY;EAC3D,MAAM,CAACY,eAAe,EAACC,kBAAkB,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EAE5DD,SAAS,CAAC,MAAM;IACZ,MAAMe,KAAK,GAAG,YAA2B;MACrCjB,aAAa,CAACkB,oBAAoB,EAAE;MACpClB,aAAa,CAACmB,WAAW,CAACC,YAAY,CAAC;MACvC,MAAMC,eAAe,EAAE;MACvB,MAAMC,iBAAiB,EAAE;MACzB,MAAMC,oBAAoB,EAAE;IAChC,CAAC;IAEDN,KAAK,EAAE;EACX,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMO,YAAY,GAAG,MAAOC,IAAa,IAAoB;IACzDxB,UAAU,CAACyB,gBAAgB,CAACD,IAAI,CAACE,IAAI,EAAE,CAAC;IACxC,MAAMN,eAAe,EAAE;IACvB,MAAMC,iBAAiB,EAAE;IACzB,MAAMC,oBAAoB,EAAE;EAChC,CAAC;EAED,MAAMK,WAAW,GAAG,YAA4B;IAC5C3B,UAAU,CAAC4B,gBAAgB,EAAE;EACjC,CAAC;EAED,MAAMT,YAAY,GAAIU,OAAO,IAAY;IACrC,MAAMC,IAAI,GAAGD,OAAO,CAACnB,MAAgB;IACrC,MAAMqB,MAAM,GAAGF,OAAO,CAACE,MAAgB;IAEvC,IAAGD,IAAI,KAAK,EAAE,EAAC;MACXf,kBAAkB,CAACgB,MAAM,KAAK,CAAC,GAAE,IAAI,GAAG,KAAK,CAAC;MAC9CpB,SAAS,CAAED,MAAM,IAAK,CAAC,GAAGA,MAAM,EAAC;QAACqB,MAAM;QAAED;MAAI,CAAC,CAAC,CAAC;IACrD;EACJ,CAAC;EAED,MAAMT,iBAAiB,GAAG,YAAkB;IACxCd,YAAY,CAAC,CAAC,MAAMP,UAAU,CAACgC,qBAAqB,EAAE,EAAEC,UAAU,CAAC,GAAG,EAAC,EAAE,CAAC,CAAC;EAC/E,CAAC;EAED,MAAMX,oBAAoB,GAAG,YAAkB;IAC3CT,eAAe,CAAC,MAAMb,UAAU,CAACkC,mBAAmB,EAAE,CAAC;EAC3D,CAAC;EAED,MAAMd,eAAe,GAAE,YAAkB;IACrCX,UAAU,CAAC,MAAMT,UAAU,CAACoB,eAAe,EAAE,CAAC;EAClD,CAAC;EAED,oBACI;IAAK,SAAS,EAAC,SAAS;IAAA,wBACpB,QAAC,MAAM;MAAC,MAAM,EAAIV;IAAO;MAAA;MAAA;MAAA;IAAA,QAAE,eAC3B,QAAC,KAAK;MACN,eAAe,EAAEI,eAAgB;MACjC,WAAW,EAAIS,YAAa;MAC5B,WAAW,EAAII,WAAY;MAC3B,eAAe,EAAErB,SAAU;MAC3B,YAAY,EAAEM,YAAa;MAC3B,OAAO,EAAIJ;IAAQ;MAAA;MAAA;MAAA;IAAA,QACjB;EAAA;IAAA;IAAA;IAAA;EAAA,QACA;AAEd,CAAC;AAAA,GAjEYH,GAAG;AAAA,KAAHA,GAAG;AAAA;AAAA"},"metadata":{},"sourceType":"module"}