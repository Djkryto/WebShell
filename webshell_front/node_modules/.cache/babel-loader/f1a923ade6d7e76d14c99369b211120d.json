{"ast":null,"code":"var _jsxFileName = \"C:\\\\Project\\\\ASP.Net\\\\TestGit\\\\webshell_front\\\\src\\\\Authorization\\\\Component\\\\Login.tsx\",\n  _s = $RefreshSig$();\nimport { TokenContext } from '../AuthorizationProvider';\nimport React, { useContext, useRef } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { CookiePanel } from './CookiePanel';\nimport '../../css/auth.css';\nimport 'ts-replace-all';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n/*\r\n *  Функциональный компонент входа в систему.\r\n */\nexport const Login = () => {\n  _s();\n  const navigate = useNavigate();\n  const passwordValue = useRef(null);\n  const loginValue = useRef(null);\n  const tokenContext = useContext(TokenContext);\n\n  /*\r\n   *  Отправка данных на сервер.\r\n   */\n  const authorization = async data => {\n    const urlLogin = 'https://localhost:7145/auth/login';\n    const isJWT = tokenContext.isJWT;\n    const clientData = {\n      User: data,\n      isJWT: isJWT\n    };\n    const responce = await fetch(urlLogin, {\n      method: 'POST',\n      body: JSON.stringify(clientData)\n    });\n    if (tokenContext.isJWT) tokenContext.setToken(await responce.text());else tokenContext.setToken(document.cookie);\n    navigate('/console');\n  };\n\n  /*\r\n  *  Отправка данных на контроллер работающий с JWT.\r\n  */\n  const JWTAuthAsync = async data => {\n    const token = await getTokenAsync(data);\n    const readyToken = token.replaceAll('\\\"', '');\n    if (readyToken === \"\") return;\n    tokenContext.setToken(token);\n    navigate('/console');\n  };\n  /*\r\n  *  Получение JWT токена от сервера.\r\n  */\n  const getTokenAsync = async data => {\n    const urlLogin = 'https://localhost:7145/jwt/login';\n    const responce = await fetch(urlLogin, {\n      method: 'POST',\n      body: JSON.stringify(data),\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      }\n    });\n    const promise = await responce.text();\n    return promise;\n  };\n  /*\r\n  *  Отправка данных на контроллер работающий с Cookie\r\n  */\n  const CoockieAuthAsync = async data => {\n    const urlLogin = 'https://localhost:7145/cookie/login';\n    const responce = await fetch(urlLogin, {\n      method: 'POST',\n      body: JSON.stringify(data),\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      credentials: 'include'\n    });\n    tokenContext.setToken(document.cookie);\n    const promise = await responce.text();\n    if (promise === '0') navigate('/console');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex panel\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"WebShell\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"lineTop\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"\\u041B\\u043E\\u0433\\u0438\\u043D\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        ref: loginValue,\n        className: \"input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"\\u041F\\u0430\\u0440\\u043E\\u043B\\u044C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        ref: passwordValue,\n        className: \"input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"lineBottom\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"button login\",\n        onClick: () => {\n          var _loginValue$current, _passwordValue$curren;\n          authorization({\n            Id: 0,\n            Login: (_loginValue$current = loginValue.current) === null || _loginValue$current === void 0 ? void 0 : _loginValue$current.value,\n            Password: (_passwordValue$curren = passwordValue.current) === null || _passwordValue$curren === void 0 ? void 0 : _passwordValue$curren.value\n          });\n        },\n        children: \"\\u041E\\u0442\\u043F\\u0440\\u0430\\u0432\\u0438\\u0442\\u044C \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"button register\",\n        onClick: () => window.location.href = 'http://localhost:3000/register',\n        children: \"\\u0420\\u0435\\u0433\\u0438\\u0441\\u0442\\u0440\\u0430\\u0446\\u0438\\u044F\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(CookiePanel, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 9\n  }, this);\n};\n_s(Login, \"8CDSpgRW6YdHRRL9MVTL2milOKQ=\", false, function () {\n  return [useNavigate];\n});\n_c = Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["TokenContext","React","useContext","useRef","useNavigate","CookiePanel","Login","navigate","passwordValue","loginValue","tokenContext","authorization","data","urlLogin","isJWT","clientData","User","responce","fetch","method","body","JSON","stringify","setToken","text","document","cookie","JWTAuthAsync","token","getTokenAsync","readyToken","replaceAll","headers","promise","CoockieAuthAsync","credentials","Id","current","value","Password","window","location","href"],"sources":["C:/Project/ASP.Net/TestGit/webshell_front/src/Authorization/Component/Login.tsx"],"sourcesContent":["import { TokenContext } from '../AuthorizationProvider'\r\nimport React, { useContext, useRef } from 'react'\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { CookiePanel } from './CookiePanel'\r\nimport '../../css/auth.css'\r\nimport 'ts-replace-all'\r\n\r\ntype User = {\r\n    Id:number,\r\n    Login:string | undefined,\r\n    Password:string | undefined\r\n}\r\n\r\ntype ClientData = {\r\n    User: User,\r\n    isJWT: boolean\r\n}\r\n/*\r\n *  Функциональный компонент входа в систему.\r\n */\r\nexport const Login = () => {\r\n    const navigate = useNavigate()\r\n    const passwordValue = useRef<HTMLInputElement>(null)\r\n    const loginValue = useRef<HTMLInputElement>(null)\r\n    const tokenContext = useContext(TokenContext)\r\n    \r\n   /*\r\n    *  Отправка данных на сервер.\r\n    */\r\n    const authorization = async (data : User) : Promise<void> => {\r\n\r\n        const urlLogin = 'https://localhost:7145/auth/login'\r\n        const isJWT = tokenContext.isJWT;\r\n        const clientData : ClientData = {User: data, isJWT:isJWT}\r\n\r\n        const responce = await fetch (urlLogin,{ \r\n            method: 'POST',\r\n            body:  JSON.stringify(clientData)\r\n        })\r\n        \r\n        if(tokenContext.isJWT)\r\n            tokenContext.setToken(await responce.text())\r\n        else \r\n            tokenContext.setToken(document.cookie)\r\n        \r\n        navigate('/console')\r\n    }\r\n\r\n    /*\r\n    *  Отправка данных на контроллер работающий с JWT.\r\n    */\r\n    const JWTAuthAsync = async (data : User)=>{\r\n        const token = await getTokenAsync(data)\r\n        const readyToken = token.replaceAll('\\\"','')\r\n\r\n        if(readyToken === \"\")\r\n            return\r\n\r\n        tokenContext.setToken(token)\r\n        navigate('/console')\r\n    }\r\n    /*\r\n    *  Получение JWT токена от сервера.\r\n    */\r\n    const getTokenAsync = async (data : User) : Promise<string> => {\r\n        const urlLogin = 'https://localhost:7145/jwt/login'\r\n        const responce = await fetch (urlLogin,{ \r\n            method: 'POST',\r\n            body:  JSON.stringify(data),\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n            }\r\n        })\r\n\r\n        const promise = await responce.text()\r\n        \r\n        return promise\r\n    }\r\n    /*\r\n    *  Отправка данных на контроллер работающий с Cookie\r\n    */\r\n    const CoockieAuthAsync = async (data:User) : Promise<void> => {\r\n        const urlLogin = 'https://localhost:7145/cookie/login'\r\n        const responce = await fetch (urlLogin,{ \r\n            method: 'POST',\r\n            body:  JSON.stringify(data),\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json',\r\n            },\r\n            credentials : 'include'\r\n        })\r\n        \r\n        tokenContext.setToken(document.cookie)\r\n\r\n        const promise = await responce.text()\r\n        \r\n        if(promise === '0')\r\n            navigate('/console')\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className='flex panel'>\r\n                <h1>WebShell</h1>\r\n                <div className='lineTop'/>\r\n                <label>Логин</label>\r\n                <input ref={loginValue} className = 'input' />\r\n                <label>Пароль</label>\r\n                <input ref={passwordValue} className = 'input' />\r\n                <div className='lineBottom'/>\r\n                <button className='button login' onClick={()=>{authorization({Id: 0, Login: loginValue.current?.value,Password: passwordValue.current?.value})}}>Отправить </button>\r\n                <button className='button register'  onClick={() => window.location.href='http://localhost:3000/register'}>Регистрация</button>\r\n            </div>\r\n            <CookiePanel />\r\n        </div>\r\n    )\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}