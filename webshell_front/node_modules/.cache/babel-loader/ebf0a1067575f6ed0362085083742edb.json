{"ast":null,"code":"var _jsxFileName = \"C:\\\\Project\\\\ASP.Net\\\\TestGit\\\\webshell_front\\\\src\\\\Context\\\\ConsoleContext.tsx\",\n  _s = $RefreshSig$();\nimport React, { createContext, useCallback, useContext, useEffect, useReducer } from 'react';\nimport { ConsoleOutputDataReducer } from '../Console/Output/Function/ConsoleOutputDataReducer';\nimport { ConsoleDataReducer } from '../Console//Output/Function/ConsoleDataReducer';\nimport { TokenContext } from '../Authorization/AuthorizationProvider';\n//import { instanceRepository } from '../Server/Command/Repository'\n\nimport { serverHub } from '../Server/WebSoket/Hub';\n\n/*\r\n* Интерфейс для отправки данных функциональному компоненту Input.\r\n*/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n/*\r\n* Начальное состояние элемента данных для функционального компонента Input.\r\n*/\nconst initalDataConsole = {\n  outputData: {\n    output: [],\n    isDisabledWrite: false\n  },\n  consoleData: {\n    directory: '',\n    history: [],\n    subDirectory: []\n  },\n  sendCommand: async text => {},\n  stopCommand: async () => {}\n};\nexport const DataConsoleContext = /*#__PURE__*/createContext(initalDataConsole);\n/*\r\n* Обертка для передачи данных компонентам Input и Output.\r\n*/\nexport const ConsoleDataProvider = _ref => {\n  _s();\n  let {\n    children\n  } = _ref;\n  const [outputData, dispatchOutput] = useReducer(ConsoleOutputDataReducer, {\n    output: [],\n    isDisabledWrite: false\n  });\n  const [consoleData, dispatchData] = useReducer(ConsoleDataReducer, {\n    directory: '',\n    history: [],\n    subDirectory: []\n  });\n  const tokenContext = useContext(TokenContext);\n  //const dataServer = instanceRepository(tokenContext.token,tokenContext.isJWT)\n\n  useEffect(() => {\n    const connectionToServer = async () => {\n      serverHub.connectionToHubAsync();\n      serverHub.getDataFromHub(handleDataHub);\n      await getConsoleDataAsync();\n    };\n    connectionToServer();\n  }, []);\n  /*\r\n  * Отправка комманд серверу.\r\n  */\n  const sendCommand = useCallback(async text => {\n    await serverHub.sendCommand(text.trim());\n    await getConsoleDataAsync();\n  }, []);\n  /*\r\n  * Отправка комманды на остановку рабочего процесса от веденной прежде комманды на сервере.\r\n  */\n  const stopCommand = useCallback(async () => {\n    await serverHub.stopProcessingCommand();\n  }, []);\n  /*\r\n  * Получение данных вывода с сервера.\r\n  */\n  const handleDataHub = useCallback(dataHub => {\n    const line = dataHub.output;\n    const status = dataHub.status;\n    const isStopWriteUser = dataHub.status === 0 ? true : false;\n    const objectOutput = {\n      status,\n      line\n    };\n    if (line !== '') dispatchOutput({\n      type: 'changeAllValue',\n      data: {\n        isDisabledWrite: isStopWriteUser,\n        output: objectOutput\n      }\n    });\n  }, []);\n  /*\r\n  * Получение стороковых данных с сервера.\r\n  */\n  const getConsoleDataAsync = useCallback(async () => {\n    const currnetDirectory = await serverHub.getCurrentDirectory();\n    const subDirectory = await serverHub.getSubDirectories();\n    const history = await serverHub.getHistoryAsync();\n    const directory = currnetDirectory.replace('\\\"', '').replace('\\\"', '');\n    dispatchData({\n      type: 'changeAllValue',\n      data: {\n        directory,\n        subDirectory,\n        history\n      }\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(DataConsoleContext.Provider, {\n    value: {\n      outputData,\n      consoleData,\n      sendCommand,\n      stopCommand\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 12\n  }, this);\n};\n_s(ConsoleDataProvider, \"Mc+E65FgXrHLuKkcMYTDk2/BcuM=\");\n_c = ConsoleDataProvider;\nvar _c;\n$RefreshReg$(_c, \"ConsoleDataProvider\");","map":{"version":3,"names":["React","createContext","useCallback","useContext","useEffect","useReducer","ConsoleOutputDataReducer","ConsoleDataReducer","TokenContext","serverHub","initalDataConsole","outputData","output","isDisabledWrite","consoleData","directory","history","subDirectory","sendCommand","text","stopCommand","DataConsoleContext","ConsoleDataProvider","children","dispatchOutput","dispatchData","tokenContext","connectionToServer","connectionToHubAsync","getDataFromHub","handleDataHub","getConsoleDataAsync","trim","stopProcessingCommand","dataHub","line","status","isStopWriteUser","objectOutput","type","data","currnetDirectory","getCurrentDirectory","getSubDirectories","getHistoryAsync","replace"],"sources":["C:/Project/ASP.Net/TestGit/webshell_front/src/Context/ConsoleContext.tsx"],"sourcesContent":["import React,{ createContext, FC, PropsWithChildren, useCallback, useContext, useEffect, useReducer } from 'react'\r\nimport { IConsoleOutputDataReducer } from '../Console/Output/Interface/IConsoleOutputDataReducer'\r\nimport { ConsoleOutputDataReducer } from '../Console/Output/Function/ConsoleOutputDataReducer'\r\nimport { ConsoleDataReducer } from '../Console//Output/Function/ConsoleDataReducer'\r\nimport { IConsoleData } from '../Console//Output/Interface/IConsoleData'\r\nimport { TokenContext } from '../Authorization/AuthorizationProvider'\r\n//import { instanceRepository } from '../Server/Command/Repository'\r\nimport { IDataHub } from '../Console/Output/Interface/IDataHub'\r\nimport { serverHub } from '../Server/WebSoket/Hub'\r\n\r\n/*\r\n* Интерфейс для отправки данных функциональному компоненту Input.\r\n*/\r\ninterface IDataConsole {\r\n    outputData: IConsoleOutputDataReducer,\r\n    consoleData: IConsoleData,\r\n    sendCommand: (text:string) => Promise<void>,\r\n    stopCommand: () => Promise<void>\r\n}\r\n\r\n/*\r\n* Начальное состояние элемента данных для функционального компонента Input.\r\n*/\r\nconst initalDataConsole : IDataConsole = {\r\n    outputData: {\r\n        output: [],\r\n        isDisabledWrite: false\r\n    },\r\n    consoleData: {\r\n        directory: '', \r\n        history: [], \r\n        subDirectory: [] \r\n    },\r\n\r\n    sendCommand: async (text:string): Promise<void> => {},\r\n    stopCommand: async () : Promise<void> =>{}\r\n}\r\n\r\nexport const DataConsoleContext = createContext<IDataConsole>(initalDataConsole)\r\n/*\r\n* Обертка для передачи данных компонентам Input и Output.\r\n*/\r\nexport const ConsoleDataProvider : FC<PropsWithChildren> = ({children}) => {\r\n    const [outputData, dispatchOutput] = useReducer(ConsoleOutputDataReducer,{output: [], isDisabledWrite: false})\r\n    const [consoleData, dispatchData] = useReducer(ConsoleDataReducer,{ directory: '', history: [], subDirectory: [] })\r\n    const tokenContext = useContext(TokenContext)\r\n    //const dataServer = instanceRepository(tokenContext.token,tokenContext.isJWT)\r\n\r\n    useEffect(() => {\r\n        const connectionToServer = async () : Promise<void> => {\r\n            serverHub.connectionToHubAsync()\r\n            serverHub.getDataFromHub(handleDataHub)\r\n            await getConsoleDataAsync()\r\n        }\r\n        \r\n        connectionToServer()\r\n    }, []) \r\n    /*\r\n    * Отправка комманд серверу.\r\n    */\r\n    const sendCommand = useCallback(async (text : string): Promise<void> => {\r\n        await serverHub.sendCommand(text.trim())\r\n        await getConsoleDataAsync()\r\n    },[])\r\n    /*\r\n    * Отправка комманды на остановку рабочего процесса от веденной прежде комманды на сервере.\r\n    */\r\n    const stopCommand = useCallback(async () : Promise<void> => {\r\n        await serverHub.stopProcessingCommand()\r\n    },[])\r\n    /*\r\n    * Получение данных вывода с сервера.\r\n    */\r\n    const handleDataHub = useCallback((dataHub : IDataHub) : void => {\r\n        const line = dataHub.output\r\n        const status = dataHub.status\r\n        \r\n        const isStopWriteUser = dataHub.status === 0? true : false\r\n        const objectOutput = {status,line}\r\n\r\n        if(line !== '')\r\n            dispatchOutput({type: 'changeAllValue', data: {isDisabledWrite: isStopWriteUser, output: objectOutput}})\r\n    }, [])\r\n    /*\r\n    * Получение стороковых данных с сервера.\r\n    */\r\n    const getConsoleDataAsync = useCallback(async () : Promise<void> => {\r\n        const currnetDirectory = await serverHub.getCurrentDirectory();\r\n        const subDirectory = await serverHub.getSubDirectories()\r\n        const history = await serverHub.getHistoryAsync()\r\n\r\n        const directory = currnetDirectory.replace('\\\"','').replace('\\\"','')\r\n\r\n        dispatchData({type: 'changeAllValue', data: {directory, subDirectory, history}})\r\n    }, [])\r\n\r\n    return(<DataConsoleContext.Provider value={{outputData,consoleData,sendCommand,stopCommand}}>\r\n                {children}\r\n            </DataConsoleContext.Provider>)\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}